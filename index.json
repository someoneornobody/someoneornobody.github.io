[{"categories":["vue"],"contents":" 개발환경 현재 개발중인 환경은 아래와 같다\nfront framework: vue3 (v3.2.13) build tool: vite (v3.1.9) 상황 개발을 하다보면 local, dev, prod 와 같은 개발환경에 따라 다른 처리가 필요한 부분이 꼭 생기게 된다.\nvue3, vite 를 사용하여 개발하는 지금, 이러한 처리가 필요한 부분이 발생하여 해당 환경에 맞게 처리 후\n테스트 할 환경으로 빌드를 하기 위해 아래와 같이 빌드를 실행하였다.\nnpm run build --mode local 정상적으로 진행 될 거라 생각했지만 아래와 같은 오류가 발생하였다.\nError: \u0026#34;local\u0026#34; cannot be used as a mode name because it conflicts with the .local postfix for .env files. 내용을 찾아보니 .local 이라는 접미사(postfix) 를 환경변수 파일 (.env) 의 이름으로 사용하고 있기 떄문에 충돌이 난다 라는 것이었다.\n해결 먼저 결론부터 얘기하자면 local 이라는 환경 대신 local-dev 와 같은 값으로 변경해서 사용하면 된다.\n간단히 두 단계로 설명하자면\u0026hellip;\u0026hellip;\u0026hellip;.\npackage.json 수정\npackage.json 의 scripts 내 구문을 아래와 같이 수정한다.\n{ \u0026#34;name\u0026#34;: \u0026#34;example-vue3\u0026#34;, .... \u0026#34;scripts\u0026#34;: { \u0026#34;dev\u0026#34;: \u0026#34;vite\u0026#34;, \u0026#34;build_dev\u0026#34;: \u0026#34;vite build --mode dev\u0026#34;, \u0026#34;build_prod\u0026#34;: \u0026#34;vite build --mode production\u0026#34;, \u0026#34;build\u0026#34;: \u0026#34;vite build --mode local-dev\u0026#34; } } .... build 구분의 뒤에 --mode local-dev 로 환경변수의 값을 설정해준다. (local-dev 가 아닌 본인이 원하는 값으로 해도 된다.)\nbuild 후 확인\n아래의 명령어를 통해 build 후 환경변수 값을 확인한다.\nnpm run build -\u0026gt; 브라우저에 접속하여 import.meta.env.MODE 변수를 통해 현재 개발환경 모드를 확인한다.\nconsole.log(`mode: ${import.meta.env.MODE}`) local-dev 라는 값을 확인 할 수 있을 것이다.\n왜? 위의 오류에 대해 설명하기 전에.. 먼저 vite 의 실행과정에 대해 알아보자면..\nvite 는 시작 시 .env 파일을 찾아 로드한다고 한다.\n보통 vite 로 개발 시 서버실행을 위해서는 npm run dev 를 입력하여 실행하게 되는데 이 내용은 기본적으로 package.json 에 있는 작성된 스크립트를 실행시킨다.\n만약 package.json 이 위에 작성 된 것 처럼 설정되어있을 시\nnpm run dev 는 그냥 vite 라는 커맨드를 실행 시키게 될 것이고\nnpm run build 는 vite build --mode local-dev 라는 커맨드를 실행시키게 되는 것이다.\n이와 같이, vite build 뒤에는 --mode [environment] 를 추가할 수 있는데 이렇게 임의로 environment 를 설정하여 build 시에는 .env.[environment] 와 같은 해당 environment 파일을 찾으려 한다고 한다.\n해당 내용으로 vite 공식 사이트에서는 아래와 같이 설명하고 있다.\n.env # loaded in all cases .env.local # loaded in all cases, ignored by git .env.[mode] # only loaded in specified mode .env.[mode].local # only loaded in specified mode, ignored by git 이 때, .env.local 이라는 파일이 이미 사용중이라 충돌이 나기 때문에 해당 이름으로는 사용 할 수 없다고 하는 것이다. (아니 근데 대체 어디서 사용중인지는 아직\u0026hellip;)\n그렇다면 .env 상황이 없는 상태에서는 어떨까?\n.env 파일이 없는 상황에서의 별도로 설정된 기본값이 있으며 해당 값은 아래와 같다.\nnpm run dev -\u0026gt; development\nnpm run build -\u0026gt; production\n결론은.. 저~ 위에 package.json 처럼 작성 되었을 경우 실행 커맨드에 따른 import.meta.env.MODE 값은 아래와 같다.\nnpm run dev -\u0026gt; development (+애플리케이션을 개발모드로 실행한다)\nnpm run build_dev -\u0026gt; dev\nnpm run build_prod -\u0026gt; production\nnpm run build -\u0026gt; local-dev\n참고로, 위 설정은 build_dev, build_prod 시에는 번들링하여 빌드된 파일을 생성하는 용도 이므로\u0026hellip; 만약 직접 해당 실행환경으로 서버를 띄워서 확인 하고 싶다면 build 명령어를 빼면 된다.\n아래처럼 \u0026hellip;\n... scripts: { ... \u0026#34;build_dev\u0026#34;: \u0026#34;vite --mode dev\u0026#34;, \u0026#34;build_prod\u0026#34;: \u0026#34;vite --mode production\u0026#34;, ... } p.s 개인적으로 본문의 내용을 잊지 않기 위해 기록할 겸 글로 작성해봤는데\u0026hellip; 작성하면서도 왜??, 어떻게..?? 하는 부분이 개인적으로도 많이 있는 것 같다.\n예를들면 --mode local 로 사용 할 수 있을 것 같고\u0026hellip; 또 대체 .env.local 파일을 어떤 시스템에서 어떻게 사용중이길래 안된다는 건지 등\u0026hellip;\n시간이 될 때 더 찾아보고 보강을 해야 할 것 같다.\n","permalink":"https://someoneornobody.github.io/dev/vue/set-env-mode/","tags":["vue3","vite","mode","local"],"title":"[Vue] import.meta.env.MODE 값 설정하기"},{"categories":["vue"],"contents":" 화면에서 computed 속성의 값을 변경 시킬 경우 발생하는 오류와 이에 대한 해결 방법을 이야기하고자 한다.\n먼저, 아래의 소스를 보자.\n\u0026lt;template\u0026gt; \u0026lt;div\u0026gt; \u0026lt;p\u0026gt;computed 값: {{ compDefaultValue }}\u0026lt;/p\u0026gt; \u0026lt;button @click=\u0026#34;increase\u0026#34;\u0026gt;문구 변경\u0026lt;/button\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script\u0026gt; export default { data: () =\u0026gt; ({ defaultValue: 0 }), computed: { compDefaultValue() { return this.defaultValue } }, methods: { increase() { this.compDefaultValue = 1 } } } \u0026lt;/script\u0026gt; 위 소스에서 문구 변경을 클릭할 경우 호출되는 increase 함수에서 this.compDefaultValue = 1 을 하는 순간 아래와 같은 오류가 발생할 것이다.\nvue.runtime.esm.js:619 [Vue warn]: Computed property \u0026ldquo;compDefaultValue\u0026rdquo; was assigned to but it has no setter.\ncomputed 내 에서 사용되는 속성들은 단어그대로 계산된 속성 (computed properties) 이 정의되는 것인데\n이는 명시적으로 값을 설정하지 않는 읽기 전용 으로 설계되어 있다.\n이렇게 읽기 전용으로 설계 된 속성을 변경하려하면 위와 같은 오류가 발생하게 된다.\n만약 값을 수정해야 할 필요가 있을때는 get() 및 set() 메소드를 사용하면 된다.\nget() 정의 된 값을 반환한다. getter 라고 표현한다.\nset() 정의 된 값을 수정한다. setter 라고 표현한다.\ngetter, setter 를 사용하여 수정된 소스는 아래와 같다.\n\u0026lt;template\u0026gt; \u0026lt;div\u0026gt; \u0026lt;p\u0026gt;computed 값: {{ compDefaultValue }}\u0026lt;/p\u0026gt; \u0026lt;button @click=\u0026#34;increase()\u0026#34;\u0026gt;값 증가\u0026lt;/button\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script\u0026gt; export default { data: () =\u0026gt; ({ defaultValue: 0 }), computed: { compDefaultValue: { get() { return this.defaultValue }, set(newValue) { this.defaultValue = this.defaultValue + newValue } } }, methods: { increase() { this.compDefaultValue = 1 } } } \u0026lt;/script\u0026gt; 이제 값 증가 버튼을 클릭하면 setter (set()) 를 통해 전달된 1 값이 기존 defaultValue 값에 더해지고, 화면에는 getter (get()) 를 통해 자동으로 업데이트 된 값이 표시된다.\n여기서 한가지 체크할 부분은.. 사실 아래와 같이 increase 함수에서 defaultValue 값 자체를 증가시키면 좀 더 간단하게 해결이 된다.\n\u0026lt;template\u0026gt; \u0026lt;div\u0026gt; \u0026lt;p\u0026gt;computed 값: {{ compDefaultValue }}\u0026lt;/p\u0026gt; \u0026lt;button @click=\u0026#34;increase\u0026#34;\u0026gt;값 증가\u0026lt;/button\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script\u0026gt; export default { data: () =\u0026gt; ({ defaultValue: 0 }), computed: { compDefaultValue() { return this.defaultValue } }, methods: { increase() { this.defaultValue = this.defaultValue + 1 } } } \u0026lt;/script\u0026gt; 하지만 getter, setter 가 필요한 경우가 있는데 예를들면 체크박스를 사용할 때와 같은 경우이다.\n아래의 예제는 vuex 를 사용 시 store 내 state 의 변수값을 이용하여 체크박스를 사용하는 예제이다.\n(v-checkbox 는 vuetify2에서 사용되는 요소 선언이다.)\n...store: main.js export default { namespace: true, state: { checkAll: false } ... } ...template: main.vue \u0026lt;template\u0026gt; \u0026lt;div\u0026gt; \u0026lt;v-checkbox v-model=\u0026#34;checkAll\u0026#34; :label=\u0026#34;`value: ${checkAll}`\u0026#34; \u0026gt;\u0026lt;/v-checkbox\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script\u0026gt; import {mapState} from \u0026#39;vuex\u0026#39; export default { computed: { ...mapState(\u0026#39;main\u0026#39;, { checkAll: state =\u0026gt; state.checkAll }) } } \u0026lt;/script\u0026gt; 위와 같이 작성하였을 경우 본문에서 언급한 setter 오류가 동일하게 발생한다.\n이때 간단하게 해결 할 수 있는 방법이 getter, setter 를 이용한 방법이다.\n수정 된 코드는 아래와 같다.\nstore: main.js\nexport default { namespace: true, state: { checkAll: false } ... mutations: { setCheckAll(state, v) { state.checkAll = v } } } template: main.vue\n\u0026lt;template\u0026gt; \u0026lt;div\u0026gt; \u0026lt;v-checkbox v-model=\u0026#34;compCheckAll\u0026#34; :label=\u0026#34;`value: ${compCheckAll}`\u0026#34; \u0026gt;\u0026lt;/v-checkbox\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script\u0026gt; import {mapState} from \u0026#39;vuex\u0026#39; export default { computed: { ...mapState(\u0026#39;main\u0026#39;, { checkAll: state =\u0026gt; state.checkAll }), compCheckAll: { get() { return this.checkAll }, set(v) { this.$store.commit(\u0026#39;main/setCheckAll\u0026#39;, v) } } } } \u0026lt;/script\u0026gt; 이렇게 하면 checkbox 를 클릭 할 때마다 store 의 mutations 에 설정 된 setCheckAll 함수가 호출되며\n이때 변경 된 값을 전달하게 되고, 그 값은 바로바로 화면에 표시 될 것이다.\n","permalink":"https://someoneornobody.github.io/dev/vue/setter-getter/","tags":["vue","setter","getter","vuex","computed","store"],"title":"[Vue] computed property 값 변경하기"},{"categories":["places"],"contents":" 부천 송내역 에서 도보 3분 거리에 드디어 !!!\n프라이빗 키즈풀 파티룸 이 생겼습니다.\n키즈워터룸 또는 워터룸 이라고도 불리우는데요, (아래부터는 워터룸 이라 칭할게요)\n넓은 수영장과 함께 정말 많은, 왠만한 장난감은 다 갖춘 정말 퍼펙트한 워터룸 이었습니다.\n예약은 네이버에서 올데이파티키즈룸 으로 검색하셔서 날짜 및 시간을 정해서 예매하시면 문자로 진행이 됩니다.\n비밀번호나 기타 이것저것 사용에 관련된 안내를 친절하게 받으실 수 있어요.\n위치는 송내역 북부 광장에서 신호등 건너면 바로 있는 송내 스카이뷰 자이 건물 2층 입니다.\n송내 스카이뷰 자이 2층으로 에스컬레이터나 엘레베이터를 타고 올라가서 217호로 찾아가면 됩니다.\n아래 이미지 처럼 워낙 크게 있어서\u0026hellip; 찾기 어렵거나 하진 않을거에요.\n문자로 받은 비밀번호를 입력하고 문을 열고 들어가면\u0026hellip;\n어른들은 벌써부터 우와~ 하고 아이들은 바로 뛰쳐 들어가더라구요.\n입구 좌측에는 신발장과 함께 충전기가 준비되어 있어요.\nUSB-C 타입, 라이트닝, 마이크로 5핀 등.. 왠만한 기종은 모두 충전 가능해요.\n그리고 휴지통은\u0026hellip;\u0026hellip;.. 센서\u0026hellip;\u0026hellip; 처음보는 촌놈이라 싱기방기 했어요.\n또 물티슈와 휴지도 입구에 있으니 참고!!!\n벽걸이 휴지에는 할로윈 기념 몬스터탈이 있어서 아이들 뒤로가서 몰래 놀래키기 딱좋아요!!\n이제 룸의 좌측편는 싱크대와 건식화장대가 있어요.\n먼저 싱크대를 살펴보면\u0026hellip; 진짜 없는게 없습니다.\n아기 키우시는 분들 왠만하면 도구 다 챙기시죠..?\n여기는 다 필요 없습니다.. 다 있어요.. (심지어 집에서 사서 쓰는 것 보다 더 좋은..@@;;;)\n일단 싱크대 겉으로 눈에 보이는 것만 나열해보면\u0026hellip;\n정수기, 쟁반, 물컵 (5~6개), 음식물쓰레기 처리통, 일반 유리컵 (20개?), 빨대, 키친타월, 전자레인지, 냉장고가 보였구요\u0026hellip;\n이제 싱크대 안을 살펴보자면\u0026hellip;\n젓가락, 포크, 집계, 국자, 아기스푼, 티스푼, 와인오프너 가위, 집게\u0026hellip;\n네 다 있습니다. 아기 턱받이, 아기 수저, 포크, 나이프, 앞접시, 컵.\n네 다 있습니다. 그것도 이쁜걸로다가 다 있어요. (수저 종류는 이케아꺼 같죠?) 휴지 여기 또 있습니다. 롤 휴지로 맘껏 쓸 수 있게\u0026hellip;\n그리고 물놀이나, 젖은 양말, 또는 아가들 응가\u0026hellip;\u0026hellip;를 대비한 위생 봉투도 넉넉히 있어요. 싱크대 하부에는 그릇, 대접, 밥그릇, 접시, 앞접시가 있어요.\n네 다 있습니다.\n건식화장대도 넓고 왠만한거 다 있어요.\n아기 발받침대, 넉넉한 수건 (바디수건, 일반수건 합쳐서 10장은 족히 되보였어요), 빨래통, 탈수기, 청소기, 체중기, 빗, 로션 등\u0026hellip;\n물놀이나 거품놀이 하고 나서는 여기서 말리면 돼요. 건식화장대 바로 옆에는 목욕탕 같이 생긴곳이 있어요.\n사진 왼쪽으로는 씻을 수 있게 거울과 의자, 샤워기, 샴푸, 바디워시, 아기샤워캡이 있구요,\n가운데는 물놀이 하면서 그림을 그릴 수 있는 아기수성싸인펜이 있어요.\n오른쪽 위에 보자기 같이 생겨서 달린건\u0026hellip; 거품놀이를 위한 대형 버블폼머신기!!!\n저기거 거품이 뽀글뽀글\u0026hellip; 하지 않고 엄~청 나게 많이 나와서\n이 목욕탕 같은 곳을 순식간에 거품으로 채울 수 있답니다!!! 거품 떨어질때 아이들 눈돌아가요~\n그리고 오른쪽 벽도 그냥 벽이 아니라 스마트 유리벽입니다.\n어디 좋은 모텔 같은데 가면\u0026hellip; 버튼 누르면 안이 보이고, 또 다시 누르면 가려지고 하는\u0026hellip;\n아기들이 거품으로 놀때는 바깥에서 어른들이 흐뭇하게 지켜보고\u0026hellip; 또 씻을떄는 가려서 프라이버시를 지켜주는..\n진짜 디테일함에 박수를 보냅니다!! 참, 문 옆에는\u0026hellip; 앙증맞은 유아용 변기도 있습니다. 들어온지 아깐데.. 아직 룸도 못봤네요. 이제 룸을 좀 보자면,\n제가 방문한 10월 초는 할로윈 컨셉으로 꾸며져 있었어요.\n대충봐도 신경 쓴 듯한 꽃다발에 해피 할로윈 장식, 그리고 풍선까지\u0026hellip;\n이거 정말 매번 다른 사람을 위해 셋팅하는거 자체가 힘들 것 같은데 .. 대단한 것 같아요. 그리고 간단한 웰컴드링크와 함께 할로윈 사탕~ 네 이건 그냥 이뻐서 찍어봤어요.\n또 세심함에 감사하며\u0026hellip; 한쪽에는 아기용 트램펄린과 함께 스탠바이미가 뙇!\n스탠바이미인지는 뭔지 모르지만 하여튼 이동식 티비라\u0026hellip;\n제 일행이 갔을 때는 밥먹을때 식탁쪽으로 가져와서 아기들 영상 틀어주고,\n그 외에는 음악 틀어놓는 용도로 사용했어요 좀 더 안쪽으로 들어가면 이제 또 아이들을 위한 공간이 마련되어 있어요.\n의자는\u0026hellip; 어른이 앉아도 될.. 것 같긴 하지만 아이들이 식당놀이 할 떄 쓰는 의자 같았어요.\n바로 옆이 주방처럼 생긴 놀이공간 이거든요.\n그리고 룸의 가장 끝에는 조그만한 방이 있는데요\n이곳은 수유실 같았어요.\n아기 의자도 있고, 또 편하게 앉아서 쉴 수 있는 (아기를 안고 재우려는 용도니까 편해도 편한게 아니겠지만\u0026hellip;\u0026hellip;) 딱 봐도 푹신한 의자가 있어요.\n정말 이런 공간까지 있다는거에 다시 한번 깨알 디테일에 박수를.. 룸 한가운데에는 작은 모래놀이 공간이 있어요.\n아기 1, 어른 1 정도\u0026hellip; 또는 아기 2~3 정도 들어갈 만한 작은 공간이지만\n이러한 공간도 허투루 쓰지 않고 아주 나이스한 공간으로 만들었다는 것이 놀라웠어요. 그리고 널찍한 룸을 신나게 왔다갔다 할 수 있도록 자동차도 준비되어 있었어요. 자 이제 2층으로 올라와서\u0026hellip;\n이건 2층 전경이에요. 작은 복층 형태라 그리 넓진 않지만 그렇다고 좁지도 않아요.\n아이들이라면 한 예닐곱 명도 충분히 놀 수 있는 공간이거든요. 제가 보자마자 \u0026lsquo;와.. 이건 나도 사서 집에 놓을까..\u0026rsquo; 할 정도로 괜찮았던 낚시 장난감.\n디자인 정말 이뻐서 이거 꼭 사야겠다 했지만.. 집에 돌아와서 좁은 집에 무슨.. 하고 현타와서 포기했던.. 그리고 이건 아기가 가장 좋아했던 자동차 장난감.\n자동차 중에서도 중장비를 좋아하고, 중장비 중에서도 크레인을 좋아하는데 그 크레인보다 더 좋아하는게 타워크레인\u0026hellip;\u0026hellip;\n인데 그게 바로 여기 뙇!!! 있었어요.\n기차 떨어뜨리고 크레인으로 들고 놀이만 50번 정도 한 것 같네요. 보자마자 웃음이 나왔던 공룡 인형들.\n정말\u0026hellip; 여기는 세심함과 센스로 똘똘 뭉친 곳이에요.\n보통 키즈카페나 테마키즈룸 가보면 그냥 장난감들 널부러져 있기 마련인데\u0026hellip;\n여기는 공룡들이 서로 대치하고 싸우는 것 처럼\u0026hellip; 진짜 깨알같은 컨셉으로 똘똘 뭉쳐있었어요.\n너무 마음에 들었어요 진짜.. 그리고 어른들도 무서워했던 미끄럼틀.\n미끄럽습니다. 빨라요. 엉덩이만 그냥 들고 슝 내려가면 엉덩이뼈 꽤 아파요.\n근데 아이들은 그냥 좋답니다\u0026hellip;. 좋대요.. 그럼 된거죠\u0026hellip; 작은 피아노도 있어요. 작은 피아노들 많이 봤지만 모두 투박하고 그냥 누가봐도 장난감인데\u0026hellip;\n이건 진짜 이쁜 원목피아노 미니어쳐로 만든 것 처럼 이쁘게 작았어요. 소리도 잘나고 갖고 싶은 장난감이었어요. 자 이제 대망의 수영장!!!\n4.5m x 3m 크기의 수영장이고 물은 당연히 미온수라서 언제든지 참방참방 가능해요! 튜브는 보시다시피 정말 넉넉하게 있습니다.\n어린이와 유아 모두를 위해 가운데가 뚫린 튜브와 그렇지 않은 튜브로 나뉘어져 있어요. (아.. 진짜 이 디테일 어쩔..) 또 수영장 안에서 갖고 놀 수 있는 아이템도 있어요.\n회색 바구니 안에는 물에 닿으면 반짝반짝하는 큐브가 열댓개 들어 있는데요~\n한꺼번에 던져놓고 찾아라 드래곤볼~ 하면 어른은 편하고 아이들은 놀면서 체력빼고. 효자템입니다.\n그리고 사진도 찍을 수 있게 썬글라스 도 있어요. 마지막으로 반한 세심함.\n바로 오리발\u0026hellip; 키즈풀 적지 않게 가봤지만 오리발 있는 곳은 처음이었어요..\n와 이거 진짜\u0026hellip; 여기 5번만 오면 우리 아기도 수영선수 가능\u0026hellip;\u0026hellip;\u0026hellip;.은 아니지만 아무튼..\n그리고 팔튜브, 숄더튜브 도 있어요. 구명조끼빼고 다 있으니 입맛에 맞는 튜브끼고 놀면 되겠습니다..! 요거는 소개된 대로 적자면\u0026hellip; 폭포형 물줄기바 라는 것 같은데요.\n이건.. 그냥 물나오는 것 같았어요.\n구멍이 3개가 있는데\u0026hellip; 2개를 막으면 나머지 1개는 엄청 물줄기가 쎄지는\u0026hellip; 요거는 수영장에 매달려 있길래 그냥 이뻐서 한번 찍어봤네요\u0026hellip; 자, 이제 마지막으로 룸 가운데서 입구쪽으로 찍은 전경(??)이에요~\n사진 왼쪽이 복층인데 1층은 주방형 놀이공간, 모래놀이 공간, 오른쪽 뒤로 수유실이 있습니다. 총평을 하자면,\n생긴지 얼마 안돼서 그런 것도 있겠지만 **정말 깔끔**했습니다. 뭐 어디 하나 흠잡을 곳이 없었어요\n흠은 커녕 우와우와.. 하고 감탄만 연발했네요.\n그리고 계속해서 언급해왔지만\u0026hellip;\n공간이면 공간, 아이템이면 아이템 하나하나 세심하게 신경쓴게 눈에 보이고,\n그 눈에 보이는 센스를 피부로 느끼게 해줘서 정말 돈 아깝지 않게 즐겁게 놀다왔습니다.\n근처 사시는 분들은 무조건 강추입니다!!! 고고~~ ","permalink":"https://someoneornobody.github.io/life/places/songnae-all-day-party/","tags":["올데이파티","alldayparty","부천","송내","키즈풀","파티룸","프라이빗","아기랑 놀만한 곳","아이랑 가볼만한 곳"],"title":"[부천/송내] 올데이파티 키즈풀 파티룸"},{"categories":["vue"],"contents":" 개요 pinia store 에서 vue-router 사용 시 undefined 로 인해 정상적인 동작을 하지않는 상황이 발생 사실 이건 당연한, 간단한 구조적 문제였는데.. 저와 같은 실수를 하는 사람이 없길 바라며 작성하는 게시글입니다.. 개발 환경 build tool: vite framework: vue3 state management: pinia 코드 main.js import { createApp } from \u0026#39;vue\u0026#39; import { createPinia } from \u0026#39;pinia\u0026#39; import App from \u0026#39;./App.vue\u0026#39; import router from \u0026#39;./router\u0026#39; const app = createApp(App) app.use(createPinia()) app.use(router) app.mount(\u0026#39;#app\u0026#39;) stores/common.js\nimport { defineStore } from \u0026#39;pinia\u0026#39; import { ref, computed } from \u0026#39;vue\u0026#39; import { useRouter } from \u0026#39;vue-router\u0026#39; const router = useRouter() const someVar = ref(\u0026#39;\u0026#39;) ... function goPage() { router.push(\u0026#39;/next\u0026#39;) } ... export const useCommonStore = defineStore(\u0026#39;common\u0026#39;, () =\u0026gt; { return { someVar, ... } }) 위와 같이 작성 시 goPage() 를 호출하면 아래와 같은 오류가 발생한다.\ncommon.js?t=1696379954131:8 Uncaught TypeError: Cannot read properties of undefined (reading \u0026lsquo;push\u0026rsquo;)\n그리고 console.log(router) 로 router 를 확인하면 undefined 를 확인할 수 있다.\n원인과 해결 문제의 원인은 당연하게도 호출시점 이다. vue-router 를 참조선언 한 후 사용하려면 setup 함수 내에서 선언 후 사용해야 하는데 위 소스는 그렇지 않다.\n위 stores/common.js 소스는 Vue3 script definition 방식 중 하나인 Composition API 사용법에서도 setup function (\u0026lt;script setup\u0026gt;) 방식과 유사하게 작성된 것인데 정상동작을 하기 위해서는 두 가지 방법이 있다.\n하나는 문제의 원인에 명시 된 것 처럼 setup 함수 내에 선언하여 사용하는 것 이고 다른 하나는 router 가 필요한 함수에서 생성하여 사용 하는 방법이다.\nsetup 함수 내 선언 setup 함수 내 선언하여 사용하는 방법 (defineStore 함수의 두번째인자가 storeSetup 속성이다)\n// common.js import { defineStore } from \u0026#39;pinia\u0026#39; import { ref, computed } from \u0026#39;vue\u0026#39; import { useRouter } from \u0026#39;vue-router\u0026#39; ... const router = ref(null) ... function goPage() { router.value.push(\u0026#39;/next\u0026#39;) } export const useCommonStore = defineStore(\u0026#39;common\u0026#39;, () =\u0026gt; { router.value = useRouter() return { someVar, ... } }) 개별 함수 내 선언 호출이 필요한 함수 내에서 별도로 생성하여 사용하는 방법\n// common.js import { defineStore } from \u0026#39;pinia\u0026#39; import { ref, computed } from \u0026#39;vue\u0026#39; import { useRouter } from \u0026#39;vue-router\u0026#39; const someVar = ref(\u0026#39;\u0026#39;) ... function goPage() { // goPage 함수 내에서 선언 const router = useRouter() router.push(\u0026#39;/go_next\u0026#39;) } ... export const useCommonStore = defineStore(\u0026#39;common\u0026#39;, () =\u0026gt; { return { someVar, ... } }) ","permalink":"https://someoneornobody.github.io/dev/vue/router-use-in-pinia-store/","tags":["vue3","vue-router","pinia","store"],"title":"[Vue] Pinia Store 에서 vue-router 사용하기"},{"categories":["db"],"contents":" sql_mode 란? MySQL 이나 Mariadb 에서 데이터베이스 서버가 수행하는 SQL 작업의 동작 및 유효성(엄격성)을 정의하는 구성 설정입니다.\n이는 SQL 구문이나 데이터 유효성 검사, 오류 처리 등을 어떻게 처리할 지 결정하며,\nSQL 표준 및 데이터 무결성과 관련하여 데이터베이스의 호환성 및 동작에 영향을 미칠 수 있는 중요한 설정입니다. 구성 항목 (요소) ANSI_QUOTES 활성화 시 쌍따옴표 (\u0026quot;) 는 컬럼명, 테이블과 같은 식별자만 처리 할 수 있도록 한다.\nSELECT \u0026#34;COLUMN_NAME\u0026#34; FROM \u0026#34;TABLE_NAME\u0026#34; STRICT_TRANS_TABLE 컬럼 타입과 다를 경우 최대한 맞춰서 값을 입력하게 할 것인지 여부. OFF 상태일 경우 타입과 다르다면 오류 발생\nSTRICT_ALL_TABLE STRICT_TRANS_TABLE 과 유사하며 해당 트랜잭션이 아닌 전체 테이블에 대해 엄격성을 적용\nERROR_FOR_DIVISION_BY_ZERO 0 으로 나누는 것에 대한 유효성 처리 (MODE(N,0). ON 상태일 시 0 으로 나눈 것에 대해 INSERT 를 수행 시 NULL 이 들어가면 오류 발생\nNO_ZERO_TIME OFF 상태 일 시 datetime 필드에 값에 공백 입력 시 자동으로 날짜형식 (0000-00-00) 또는 시간형식(0000-00-00 00:00:00) 형식으로 등록\nNO_ZERO_IN_TIME ON 상태일 시 연, 월에 0 입력을 허용않는다 2023-00-12 08:57:11: 과 같은 데이터를 삽입하려 한다면 오류가 발생\nALLOW_INVALID_DATES ON 상태일 시, 잘못되지 않은 날짜의 삽입을 허용한다. 예를들어 2023-02-31 과 같이 유효하지 않은 날짜도 등록 가능\nONLY_FULL_GROUP_BY GROUP BY 시 SELECT 절의 모든 필드가 포함되어야 한다. (v5.7 에서 추가)\nNO_ENGINE_SUBSTITUTION ON 상태일 시, CREATE, ALTER 시 사용가능한 engine 이 아니라면 오류 발생\nNO_AUTO_CREATE_USER 사용자 계정 생성 처리 방법 중 하나로 MySQL 에서 클라이언트가 존재하지 않는 사용자 이름으로 데이터베이스 접속을 시도할 경우 기본동작은 해당 이름과 함께 빈 비밀번호를 사용하여 새 사용자 계정을 생성하는 것이지만 해당 옵션이 ON 상태라면 오류 메시지와 함꼐 연결을 거부함. 예시로 아래와 같은 수행이 불가능.\nmysql -u root -p \u0026lt; dump.sql 적용방법 쿼리로 바로 적용하기 현재 세션에만 설정하기\nSET SESSION sql_mode=ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION 전역으로 설정하기 SET GLOBAL sql_mode=ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION 쿼리로 설정할 경우 현재 세션이나 현재 실행중인 서버 상태만 적용되므로 서버 재기동이 발생 할 경우 해당 옵션이 적용되지 않게 된다. 그러므로 위와 같이 쿼리로 따로 설정을 해주더라도 설정을 일관되게 유지시켜 주고 싶다면 설정파일에 따로 선언을 해두는 것을 추천 한다. 설정파일에서 적용하기 my.cnf (또는 my.ini) 에서 아래와 같이 설정한다.\n... [mysqld] sql_mode=ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION ... 위와 같이 설정 파일에 선언을 해두면 업데이트 등으로 인한 서버 재기동이 발생하여도 기존 환경과 동일하게 적용되므로 관련된 오류 상황에 대비 할 수 있다.\n","permalink":"https://someoneornobody.github.io/dev/db/mysql-mariadb-sql-mode/","tags":["sql_mode","mysql","mariadb"],"title":"[Mysql,Mariadb] sql_mode 구성 항목 및 설정"},{"categories":["db"],"contents":" Mysql, Mariadb 사용 시 datetime 필드에 공백을 입력하고 싶거나\n혹은 기존까지 공백이 잘 들어갔는데 오류가 발생하는 케이스가 있을 경우 해결하는 내용입니다. 만약 기존에 아래의 쿼리처럼 datetime 필드에 공백을 넣었을 경우 문제가 없다가 갑자기 오류가 나는 상황이 발생하는 경우가 있습니다. UPDATE USER SET AGREE_DT = :AGREE_DT, AGREE_SEQ = :AGREE_SEQ WHERE USER_SEQ = :USER_SEQ Error 1292: Incorrect datetime value: '' for column 'AGREE_DT' at row 1\n만약, 이렇게 오류가 난다면 sql_mode 를 체크해봐야 합니다.\nSELECT @@sql_mode 위와 같이 쿼리를 수행하였을 때 조회되는 항목 중, NO_ZERO_DATE, NO_ZERO_IN_TIME 의 여부를 확인하여야 합니다.\n만약 항목이 조회 된다면 ON 상태이고 조회되지 않는다면 OFF 상태 입니다.\n먼저 이 두 가지 옵션에 대해 알아보면..\nNO_ZERO_TIME 은 만약 공백으로 datetime 필드에 값을 입력 시 자동으로 0000-00-00 00:00:00 형식으로 등록되게 해줍니다.\nNO_ZERO_IN_TIME 은 연, 월에 0 입력을 허용하지 않는다는 것으로 만약 2023-00-12 08:57:11 과 같은 데이터를 삽입하려 한다면 오류가 발생하게 됩니다.\n만약 공백으로 입력시 기본값으로 0000-00-00 00:00:00 이 들어가게 하게 하고 싶다면 OFF 상태여야 하고\n정상적인 datetime 형태로만 등록이 가능하게 하고 싶다면 ON 상태여야 합니다.\n위 옵션에 대해 ON/OFF 를 설정하고 싶다면 아래와 같은 쿼리를 수행하면 됩니다.\nSET SESSION sql_mode=\u0026#39;STRICT_TRANS_TABLE,NO_ZERO_TIME,NO_ZERO_IN_DATE\u0026#39; STRICT_TRANS_TABLE 옵션은 요청 트랜잭션에 대해 데이터 검증 및 처리를 담당하는 옵션으로 명시적으로 ON 상태를 유지하도록 합니다.\n만약 GLOBAL 로 설정하고 싶다면 super 권한 (ex:root) 을 가진 계정으로 아래와 같이 수행하면 됩니다.\nSET GLOBAL sql_mode=\u0026#39;STRICT_TRANS_TABLE,NO_ZERO_DATE,NO_ZERO_IN_DATE\u0026#39; sql_mode 에 대해 조금 더 자세한 내용을 알고 싶다면 이곳 를 참고하시기 바랍니다.\n","permalink":"https://someoneornobody.github.io/dev/db/mysql-mariadb-datetime-white-space/","tags":["mysql","mariadb","NO_ZERO_DATE","NO_ZERO_IN_DATE","datetime","sql_mode"],"title":"[Mysql-Mariadb] datetime 에 공백 넣기(NO_ZERO_DATE, NO_ZERO_IN_DATE)"},{"categories":["hugo"],"contents":" 개요 본 게시물은 hugo 의 Mainroad 테마를 기준으로 작성되었습니다. 이는 아래 작성된 내용들이 환경이나 표준과 다를 수 있음을 의미합니다. 파일 생성 수행 경로: hugo 사이트 생성 경로 (hugo/my-site)\nhugo new {경로/파일명.md} 를 통해 작성할 게시물 파일을 생성하는데, 이렇게 생성된 파일은\nhugo/my-site/content\n폴더 아래 자동으로 생성됩니다. 생성 된 파일은 hugo/my-site/archetypes/default.md 에 작성된 템플릿을 기반으로 기본적인 내용이 작성되어져 있습니다..\nhugo new dev/hugo/hugo.md hugo/my-site/content/dev/hugo/hugo.md 에 파일 생성. 내용 작성 해당 md 파일에 게시할 내용을 markdown 문법으로 작성함으로써 글 작성에 대한건 사실 끝입니다. (\u0026hellip; 별거 없..)\n다만, 문법을 알고 작성해야 텍스트 편집기로 대충 쓴 것 처럼 나오지 않으므로 아래 문법을 참고하여 작성하도록 합니다.\n문법 하기 문법은 hugo-Mainroad 테마 을 참고하여 작성되었으며 해당 테마에 최적화 되었으므로 일반적인 마크다운 문법과 약간 다를 수 있습니다.\n글자색 굵기 (BOLD)\n** 별표2개 ** 글자 기울이기 (ITALIC) * 별표1개 * _ 또는 밑줄 _ 링크 [대괄호에노출문구](괄호에주소) 공간 한줄 띄우기 ... 앞 문장에서 엔터처리 후.. \u0026amp;nbsp; 순번 리스트 1. First line 2. Second line 3. Third line 순번없는 리스트 * First line * Second line * Third line 중첩 리스트 * first line * first - 1 line * first - 1 - 1 line 목차\nhugo.toml 파일 수정 ... [Params] toc = true ... ## 1 뎁스 ### 2 뎁스 #### 3 뎁스 인용\n# 한줄 표현 \u0026gt; 인용 부분. \u0026gt; 여기가 인용이에요.. # 여러줄 표현 (붙여쓰기) \u0026gt; 한줄쓰고 오른쪽에 띄어쓰기를 두번 해줘야해요 (스페이스바)(스페이스바) \u0026gt; 그리고 여기에 쓰면 두줄이 붙어서 보이게 됩니다. # 여러줄 표현 (한줄 띄우기) \u0026gt; 여기도 인용이고 \u0026gt; \u0026gt; 여기도 인용이네요? \u0026gt; \u0026gt; 이렇게 그냥 빈줄을 놔두시면 돼요.. \u0026gt; 테이블 # 기본 테이블 | COL_1 | COL_2 | COL_3 | COL_4 | | ------- | ------- | ------- | ------- | | ROW_1_1 | ROW_1_2 | ROW_1_3 | ROW_1_4 | | ROW_2_1 | ROW_2_2 | ROW_2_3 | ROW_2_4 | # 테이블 정렬 ( 콜론 (:) 위치에 따라서 정렬된다) | COL_1 | COL_2 | COL_3 | | :------ | :-------: | ------: | | 좌측정렬| 가운데정렬| 우측정렬| # 테이블에 마크다운 적용도 가능 | 기울이기 | 굵게 | 취소선 | 강조 | | *italic* | **bold** | ~~cancel~~ | `effect` | 코드 블럭 ```markdown 여기는 마크다운 코드블럭입니다. Mainroad theme 에서 ```{타입} 으로 설정 시 해당 타입에 맞는 코드블럭 스타일로 작성됩니다. ```html 이렇게 하면 HTML 코드블럭이 되는거죠... ``` ``` 강조 `back quote` 으로 씌어진 곳은 옅은 회색 배경과 빨간색으로 문구가 강조됩니다 이미지 업로드 이미지를 별도 웹사이트에 존재 하는걸 노출할게 아니라면 현재 테마 폴더 내에 위치시켜야 합니다. Mainroad 기준 이미지가 위치할 기본 경로는 hugo/my-site/theme/mainroad/static/img/ 입니다. 그리고 경로는 /img 부터 작성하도록 합니다. (아래 예시는 위 기본 경로 아래로 posts/hugo 폴더를 생성하여 hugo-image.png 파일을 위치 시킴) ![이미지설명](이미지경로) 예시) ![picture_description](/img/posts/hugo/hugo-image.png) ","permalink":"https://someoneornobody.github.io/dev/hugo/hugo-write-article/","tags":["hugo","이미지업로드"],"title":"[HUGO] 글작성, 문법, 이미지업로드 하기"},{"categories":["server"],"contents":" 개요 및 준비사항 - Apache 설치 시 OS에 필요한 라이브러리들이 없다고 가정하고(가끔 인프라쪽에 서버 생성 요청할때.. 정말 아무 라이브러리도 없는 쌩 서버만 주는 경우가 있죠..) , 필요한 라이브러리들 부터 순차적으로 설치 후 apache 를 설치하는 내용입니다.\n- 서버 설치 환경은 CentOS 7.5 버전 입니다\nApache 소스 컴파일 설치 시 필요한 라이브러리 (괄호안의 숫자는 현 문서에서 다루는 버전입니다) apache (v2.2.34)\nApache Http server. 웹 서버. download: https://httpd.apache.org/download.cgi apr (v1.7.0)\nApache Portable Runtime 의 약자. 플랫폼에 종속되지 않고 동작하기 위해 필요한 라이브러리. download: https://apr.apache.org/download.cgi apr-util (v1.6.1)\napr 유틸리티 라이브러리. DB 연결, LDAP연동, XML 파싱, 데이터 암호화 등의 유틸리티 라이브러리. download: https://apr.apache.org/download.cgi expat (v2.2.9)\nC언어 라이브러리로 만들어진 XML Parser. 위에 언급한 apr 모돌과의 인터페이스 처리 담당. download: https://github.com/libexpat/libexpat/releases zlib (v1.2.11)\n데이터 압축, 해제 라이브러리. 압축 데이터 저장 및 전송 처리. download: https://www.zlib.net/ openssl (v1.0.1u)\n암호화, 보안 프로토콜 통신 처리 라이브러리. 사이트 구성 시 SSL 처리 시 필요. download: https://www.openssl.org/source/ 프로그램 설치 프로그램 설치 경로: /user/path 설치 프로그램 위치 경로: `/user/path/app expat-2.2.9 tar.gz 압축 해제 cd /user/path/app tar –xzvf expat-2.2.9.tar.gz configure 설정 cd /user/path/app/expat-2.2.9 ./configure --prefix=/user/path/lib/expat-2.2.9 prefix: 설치 경로 컴파일 make 설치 make install 설치 경로로 이동하여 파일 확인 cd /user/path/lib/expat-2.2.9 apr-1.7.0 tar.gz 압축 해제 cd /user/path/app tar –xzvf apr-1.7.0.tar.gz configure 설정 cd /user/path/app/apr-1.7.0 cp –arp libtool libtoolT ./configure --prefix=/user/path/lib/apr-1.7.0 컴파일 및 설치 make \u0026amp;\u0026amp; make install 설치 경로로 이동하여 파일 확인 cd /user/path/lib/apr-1.7.0 apr-util-1.6.1 tar.gz 압축 해제 cd /user/path/app tar –xzvf apr-util-1.6.1.tar.gz configure 설정 cd /user/path/app/apr-util-1.6.1 ./configure --prefix=/user/path/lib/apr-util-1.6.1 --with-apr=/user/path/lib/apr-1.7.0 --with-expat=/user/path/lib/expat-2.2.9 컴파일 및 설치 make \u0026amp;\u0026amp; make install 설치 경로로 이동하여 파일 확인 cd /user/path/lib/apr-util-1.6.1 zlib01.2.11 tar.gz 압축 해제 cd /user/path/app tar –xzvf zlib-1.2.11.tar.gz configure 설정 cd /user/path/app/zlib-1.2.11 ./configure --prefix=/user/path/lib/zlib-1.2.11 컴파일 및 설치 make \u0026amp;\u0026amp; make install 모듈 변경 및 설정 파일 수정 # zlib 압축해제 폴더로 이동 cd /user/path/app/zlib-1.2.11 # libz.so 파일 zlib 설치 폴더로 복사 cp libz.so* /user/path/lib/zlib-1.2.11 # zlib 설치 폴더로 이동 cd /user/path/lib/zlib-1.2.11 # libz.so 파일 삭제 및 링크 설정 rm -f libz.so rm -f libz.so.1 ln -s libz.so.1.2.11 libz.so ln -s libz.so.1.2.11 libz.so.1 # /etc/ld.so.conf 설정 파일에 zlib 경로 추가 echo /user/path/lib/zlib-1.2.11 \u0026gt;\u0026gt; /etc/ld.so.conf # 설정파일 반영 ldconfig openssl-1.0.1u tar.gz 압축 해제 cd /user/path/app tar -xzvf openssl-1.0.1u.tar.gz configure 설정 cd /user/path/app/openssl-1.0.1u ./config --prefix=/user/path/lib/openssl --openssldir=/user/path/cert shared threads --with-zlib-lib=/user/path/lib/zlib-1.2.11 컴파일 및 설치 make \u0026amp;\u0026amp; make install 설피 경로로 이동하여 파일 확인 cd /user/path/lib/openssl openssl 경로 설정 export LD_LIBRARY_PATH=/user/path/lib/openssl/lib export 명령어로 확인 export Apache tar.gz 압축 해제 cd /user/path/app tar -xzvf httpd-2.2.34.tar.gz configure 설정 cd /user/path/app/httpd-2.2.34 ./configure --prefix=/user/path/web --enable-modules=all --enable-mods-shared=all --enable-so --enable-ssl --with-ssl=/user/path/lib/openssl --with-mpm=prefork --with-apr=/user/path/lib/apr-1.7.0 --with-apr-util=/user/path/lib/apr-util-1.6.1 --with-expat=/user/path/lib/expat-2.2.9 --with-z=/user/path/lib/zlib-1.2.11 컴파일 및 설치 make clean make make install 설치 경로로 이동하여 버전 확인하여 설치 확인 cd /user/path/web/bin ./httpd -version Web 서버 동작 확인\nhttpd.conf 파일 내 ServerName 을 localhost:80 으로 변경한다. cd /user/path/web/conf ... ServerName localhost:80 ... vi httpd.conf Apache 서버 실행 cd /user/path/web/bin ./apachectl start 브라우저 에서 접속 확인 주소창에 http://localhost 입력하여 It works 문구 확인 Apache 서버 중지 cd /user/path/web/bin ./apachectl stop 모듈 추가 아래는 Apache 사용 시 모듈을 추가하는 방법이다. 예시는 proxy 모듈로 작성되었다.\nApache 압축해제 폴더로 이동한다. (설치 폴더가 아닌 설치 압축파일의 해제 경로)\n# 압축파일 해제 경로 내 proxy 모듈 경로로 이동 cd /user/path/app/httpd-2.2.34/modules/proxy # 모듈 컴파일 및 추가 # {경로} -aic {모듈.c} /user/path/web/bin/apxs -aic mod_proxy.c proxy_util.c /user/path/web/bin/apxs -aic mod_proxy_http.c proxy_util.c /user/path/web/bin/apxs -aic mod_proxy_connect.c proxy_util.c /user/path/web/bin/apxs -aic mod_proxy_ajp.c proxy_util.c ajp_header.c ajp_utils.c ajp_link.c ajp_msg.c /user/path/web/bin/apxs -aic mod_proxy_balancer.c proxy_util.c /user/path/web/bin/apxs -aic mod_proxy_scgi.c** 아파치가 설치된 경로 내 모듈 디렉토리로 이동하여 모듈 설치 확인 cd /user/path/web/modules 아래의 모듈들을 확인한다\nmod_proxy.so\nmod_proxy_ajp.so\nmod_proxy_balancer.so\nmod_proxy_connect.so\nmod_proxy_http.so\nmod_proxy_scgi.so\nmod_ssl.so\n","permalink":"https://someoneornobody.github.io/dev/server/apache-binary-install/","tags":["apache","binary","apr","extpat","manual","module","proxy"],"title":"[Apache] 아파치 2.2.34 바이너리 설치"},{"categories":["javascript"],"contents":" BFCache ? BFCache 란 Back-forward Cache 의 약자로 브라우저가 현재 페이지의 상태를 저장하는 것을 말한다. 현재 페이지의 상태라 함은 페이지의 DOM상태, Javascript, Input, 스크롤 위치 등의 데이터가 포함될 수 있다.\n사용자가 브라우저에서 뒤로가기 또는 앞으로 가기 버튼을 클릭 하였을 때 처음 이동하는 페이지보다 월등히 더 빠르게 렌더링 된 페이지를 볼 수 있는 이유는 이러한 BFCache 로 인해 캐싱된 페이지를 보기 때문이다.\n사용자 관점에서는 매우 효과적이고 효율적인 기능이지만 개발자 입장에서는 상황에 따라 손이 한번 더 가는 경우가 발생한다. 예를들면 보통 페이지가 로딩되면 사용자는 알지 못하는 많은 이벤트가 발생한다.\n페이지를 초기화하기 위한 이벤트나 함수를 호출하는 코드들은 페이지가 로드 될 때 호출되게 되는데 뒤로가기나 앞으로가기를 하였을 경우에는 BFCache 로 인해 정상적으로 작동하지 않기 때문이다. (대표적으로 여러 플랫폼들에서의 사이트 방문자 추적, 집계를 위한 스트립트가 있는데 BFCache 에 의해 로드 된 페이지에서는 정상적으로 집계가 되지않는다고 한다)\n대응 1. BFCache 체크 이러한 문제에 대응하기 위해서는 아래의 이벤트로 BFCache 로 캐싱된 페이지 여부를 체크하는 방법이 있다. 먼저 아래의 소스를 살펴보자.\nwindow.onpageshow = function(event) { // Back Forward Cache로 브라우저가 로딩될 경우 혹은 브라우저 뒤로가기 했을 경우 if ( event.persisted || ( window.performance \u0026amp;\u0026amp; ( (window.performance.navigation \u0026amp;\u0026amp; window.performance.navigation.type == 2) || (window.performance.getEntriesByType(\u0026#34;navigation\u0026#34;) \u0026amp;\u0026amp; window.performance.getEntriesByType(\u0026#34;navigation\u0026#34;)[0].type) ) ) { // 캐싱 처리된 페이지에요~ } } BFCache 여부는 pageshow 이벤트의 persisted 프로퍼티를 이용하여 알 수 있다.\n그 다음으로 추가 된 조건은 브라우저의 navigation 에 대한 상태를 체크하는 것인데 navigation 의 type 값에 따른 내용은 아래와 같다.\n0: URL을 통한 직접 접근 1: 페이지 새로고침을 통한 접근 2: 뒤로가기 또는 앞으로가기의 히스토리를 통한 접근 이렇게 두 가지 조건을 참고해서 혹시나 브라우저 종류나 같은 브라우저라도 브라우저 버전별에 따라 정상동작하지 않는 경우를 최소화 할 수 있다.\n2. 브라우저 캐시 미사용 현재는 거의 대다수의 브라우저에서 위의 방법으로 문제 해결 처리가 가능하지만.. 아~~주 오래된 구브라우저도 지원해야 할 정도로 정말 많은 브라우저를 지원하는 사이트이고 이러한 문제에 대해 애초에 신경쓰기 싫다면 HTML 메타 태그를 사용해 BFCache 를 허용하지 않는 방법도 있다.\n아래 메타태그 선언은 캐시처리를 하지 않도록 설정한다.\n\u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta http-equiv=\u0026#34;Cache-Control\u0026#34; content=\u0026#34;no-cache\u0026#34; /\u0026gt; \u0026lt;meta http-equiv=\u0026#34;Pragma\u0026#34; content=\u0026#34;no-cache\u0026#34; /\u0026gt; \u0026lt;meta http-equiv=\u0026#34;Expires\u0026#34; content=\u0026#34;0\u0026#34; /\u0026gt; ... Cache-Control 헤더는 웹브라우저에게 페이지 또는 리소스 캐싱 동작을 지정하며 설정 값들은 아래와 같다.\npublic: 응답 데이터 캐시 가능. 공용 캐시에 저장될 수 있다. private: 응답 데이터를 개별 사용자 캐시에 저장. 공용 캐시에 저장되지 않는다. no-store: 데이터를 캐시하지 않는다. max-age={seconds}: 데이터 캐시 저장 시간(초) 설정 Pragma 헤더는 예전 HTTP/1.0 에서 사용된 캐싱 관련 지시자이며 HTTP/1.1 에서는 Cache-Control 헤더로 대체 되었으므로 잘 쓰진 않지만 혹시 모르니\u0026hellip;\nExpires 헤더는 캐시의 만료 시간 지정. 브라우저는 해당 시간 이후의 요청에 대해서는 리소스를 대로 가져와서 업데이트를 해야 한다. 이렇게 캐시처리를 하지 않으면 BFCache 에 대해서는 어느정도 자유로움을 보장 할 수 있겠지만\u0026hellip; 네트워크 트래픽, 서버부하, 페이지 로딩으로 인한 사용자 불편함 등이 발생 할 수 있으니.. 무작정 사용하지 않기 보다는 상황, 경우에 따라 BFCache 를 적절히 처리하거나 캐싱을 하지 않는 것들을 적절히 섞어서 사용하는게 올바르지 않나 생각해본다.\n","permalink":"https://someoneornobody.github.io/dev/javascript/bf-cache/","tags":["bfcache","cache","뒤로가기"],"title":"[Javascript] 브라우저 뒤로가기 처리 (BFCache, Back-forward cache)"},{"categories":["db"],"contents":" MySQL / Mariadb 명령어 root 접속 (mysql 폴더 / bin 으로 이동해서 수행) ./mysql -u root -p 사용자 목록 use mysql; select user, host from user; 비밀번호 변경 mysqladmin -u아이디 -p기존패스워드 password 신규패스워드 인덱스 초기화 ALTER TABLE [table name] AUTO_INCREMENT = 1; 현재 커넥션 개수 보기 show global status like \u0026#39;threads_connected\u0026#39;; datetime #unix_time -\u0026gt; date_time from_unixtime( signdate , \u0026#34;%Y%m%d-%H%i%S\u0026#34;) MySQL 외부 접근 권한\n%: 외부접근 localhost: 내부접근 권한설정 #gtane all privileges on {db}.{table} to {user}@{ip} identified by \u0026#39;root password\u0026#39; grant all privileges on *.* to ‘root’@\u0026#39;%’ identified by ‘root의 패스워드’; 모든IP허용 INSERT INTO mysql.user (host,user,password) VALUES (‘%’,\u0026#39;root’,password(‘패스워드’)); GRANT ALL PRIVILEGES ON *.* TO ‘root’@\u0026#39;%’; FLUSH PRIVILEGES; IP대역 허용 INSERT INTO mysql.user (host,user,password) VALUES (\u0026#39;111.222.%\u0026#39;,\u0026#39;root\u0026#39;,password(\u0026#39;패스워드\u0026#39;)); GRANT ALL PRIVILEGES ON *.* TO \u0026#39;root\u0026#39;@\u0026#39;111.222.%\u0026#39;; FLUSH PRIVILEGES; 특정 IP 허용 INSERT INTO mysql.user (host,user,password) VALUES (\u0026#39;111.222.33.44\u0026#39;,\u0026#39;root\u0026#39;,password(\u0026#39;패스워드\u0026#39;)); GRANT ALL PRIVILEGES ON *.* TO \u0026#39;root\u0026#39;@\u0026#39;111.222.33.44\u0026#39;; FLUSH PRIVILEGES; 원복 DELETE FROM mysql.user WHERE Host=\u0026#39;%\u0026#39; AND User=\u0026#39;root\u0026#39;; FLUSH PRIVILEGES; mysql.user 테이블의 password 변경 update user set password = password(\u0026#39;new password\u0026#39;) where user = \u0026#39;username\u0026#39;; Error Code : 1175 일 시 세이프 모드를 해제 한 후 적용한다.\nset sql_safe_updates = 0; -\u0026gt; 세이프 모드 해제\nset sql_safe_updates = 1; -\u0026gt; 세이프 모드 적용\nmysql 서버에 직접 접속하여 변경할 경우 flush privileges; 커맨드도 꼭 해주어야 한다.\n데이터베이스 목록 show databases; 사용자추가 #외부 create user \u0026#39;userid\u0026#39;@\u0026#39;%\u0026#39; identified by \u0026#39;user password\u0026#39;; #내부 create user \u0026#39;userid\u0026#39;@\u0026#39;localhost\u0026#39; identified by \u0026#39;user password\u0026#39;; insert into user (host, user, password) values (\u0026#39;localhost\u0026#39;, \u0026#39;userid\u0026#39;, \u0026#39;password(user password\u0026#39;)); 사용자제거 drop user \u0026#39;userid\u0026#39;; delete from user where user = \u0026#39;userid\u0026#39;; 권한주기 #전체권한 (SELECT, DELETE, UPDATE, INSERT) grant all privileges on dbname.table to userid@host identified by \u0026#39;password\u0026#39;; grant select, insert, update on dbname.table to userid@host identified by \u0026#39;password\u0026#39;; grant select, insert, update on dbname.table to userid@\u0026#39;192.168.%\u0026#39; identified by \u0026#39;password\u0026#39;; 권한 적용 flush privileges; 권한 삭제 revoke all on dbname.table from userid@host 권한 확인 show grants for userid@host show grants for \u0026#39;userid\u0026#39;@\u0026#39;%\u0026#39;; LOCK 확인 (root 등 권한이 있는 사용자로 조회) # lock_id select * from information_schema.innodb_locks; LOCK 대기 상태 select * from information_schema.innodb_lock_waits; 트랜잭션 진행 확인 # trx_mysql_thread_id select * from information_Schema.innodb_trx; LOCK 해제 kill {lock_id}; ","permalink":"https://someoneornobody.github.io/dev/db/mysql-mariadb-commands/","tags":["mysql","mariadb","명령어"],"title":"[MySQL/MariaDB] 명령어"},{"categories":["vue"],"contents":" 아래는vue3 에서 script setup 방식으로 전역변수를 사용하는 예제 입니다. 전역변수 설정 case 1 provide 를 사용하여 전역변수를 설정하는 방법. file: main.js ... const appTitle = \u0026#39;hello nobody\u0026#39; const app = createApp(app) .provide(\u0026#39;$title\u0026#39;, appTitle) .mount(\u0026#39;#app\u0026#39;) case 2 config.globalProperties 를 사용하는 방식으로 provide 와 동일하게 vue3 에서 전역 애플리케이션 인스턴스에 속성을 추가할 수 있는 기능. file: main.js ... const appTitle = \u0026#39;hello nobody\u0026#39; const app = createApp(app) ... app.config.globalProperties.$title = appTitle ... `` 전역변수 사용 case 1 inject 방식을 사용하는 방법. 일반적이며 간략하기 때문에 추천하는 방법. \u0026lt;script setup\u0026gt; import { inject, ref } from \u0026#39;vue\u0026#39; const title = inject(\u0026#39;$title\u0026#39;) console.log(title) ... \u0026lt;/script\u0026gt; case 2 getCurrentInstance 방식을 사용하는 방법. proxy 인스턴스를 호출하여 사용하는 방법. \u0026lt;script setup\u0026gt; import { getCurrentInstance, ref } from \u0026#39;vue\u0026#39; const { proxy } = getCurrentInstance() console.log(proxy.$title) ... \u0026lt;/script\u0026gt; ","permalink":"https://someoneornobody.github.io/dev/vue/use-global-properties/","tags":["vue3","전역변수","provide","inject","getCurrentInstance"],"title":"[Vue] 전역 변수 사용하기"},{"categories":["news"],"contents":" 본 게시글은 개인적인 참고를 위해 작성되었으므로 제게 필요한 정보만 간략히 모아두었습니다\n이미지의 출처는 공식홈페이지 (https://apple.com) 입니다\n가격 모델 128G 256G 512G 1TB 15 125만원 140만원 170만원 X 15 PLUS 135만원 150만원 180만원 X 15 PRO 155만원 170만원 200만원 X 15 PRO MAX X 190만원 220만원 250만원 CPU, RAM 모델 CPU RAM 15, 15 PLUS A16 (iPhone14 Pro 와 동일) 6G 15 PRO, 15 PRO MAX A17 Pro (3나노 공정) 8G 색상 모델 색상 15 , 15 PLUS BLUE, PINK, YELLOW, GREEN, BLACK 15 PRO, 15 PRO MAX NATURAL TITAN, BLUE TITAN, WHITE TITAN, BLACK TITAN 기타 카메라 15 PRO: 0.5배, 1배, 2배, 3배 광학 줌 15 PRO MAX: 0.5배, 1배, 2배, 5배 광학 줌 출시예정일 미국: 9/15 pre order, 9/22 수령 한국 (예상): 10/6 사전예약, 10/13 수령 connector 15, 15 PLUS: USB 2 15 PRO, 15 PRO MAX: USB 3 ","permalink":"https://someoneornobody.github.io/life/news/iphone15/","tags":["iphone","iphone15"],"title":"[NEWS] iPhone15"},{"categories":["hugo"],"contents":" 개요 HUGO 를 사용하여 SSG (Static Site Generators) 를 운영하는 대표적인 방법 중 하나는 github 저장소 를 이용하는 것입니다. github 를 통하여 서비스 시 별도의 비용도 발생하지 않고 다양한 플러그인들 지원을 통해 여러가지 기능을 손쉽게 적용 할 수 있는 장점이 있습니다.\n아래는 HUGO 를 통해 github 에 게시글을 작성하고 노출 시키는방법에 대해 설명해 보고자 합니다.\ngit repository 생성 먼저 github 에 가입 후 아래와 같이 2개의 repository 를 생성하도록 합니다.\n작업저장소 ( 게시글을 작성하고 저장할 저장소이며 실제 노출되는 저장소는 아님)\n→ github.com/my-account/content-storage\n호스팅저장소 (작업저장소에서 작성 된 게시글을 실제 사용자들이 볼 수 있는 저장소)\n→ content-hosting.github.io\n작업저장소 및 호스팅저장소 생성 후 로컬에서 푸쉬할 때 인증을 위해 token 을 미리 발급한다. 토큰은 github.com 에 로그인 후 우측 상단의 프로필 \u0026gt; settings \u0026gt; Developer Settings \u0026gt; Personal access tokens 메뉴에서 Create new token 버튼을통해 생성 할 수 있으며 권한은 repo 정도로만주고 진행한다.\ngithub 의 계정설정에서 (우측 상단 프로필 \u0026gt; Settings \u0026gt; Repositories \u0026gt; Repository default branch) 가 기본으로 main 으로 되어 있다면 master 로 변경한다.\n호스팅저장소는 저장소 생성 시 readme.md 파일을 생성하도록 한다. 그렇지 않으면 서브모듈로 추가 시 master 저장소가 비어서 정상적으로 연결되지 않을 수 있다\n저장소 연결하기 앞서 HUGO 시작하기 에서 저는 hugo new site my-site 로 생성하였기 때문에 수행 경로를 hugo/my-site 라 칭하겠습니다.\n작업저장소 연결하기 수행 경로: hugo/my-site\n# git 초기화 git init # 저장소 연결 git remote add origin https://github.com/my-account/content-storage # 저장소 이동 git branch -M master # 커밋 git add . git commit -am \u0026#39;initialize commit\u0026#39; git push -u origin master 호스팅저장소 연결하기 수행 경로: hugo/my-site\n# submodule 로 연결하여 준다 git submodule add -b master https://github.com/my-account/content-hosting.github.io.git public # submodule 저장소로 이동 cd ./public # 현재 저장소 확인 git status # master 가 아닐 경우 master 로 변경 git checkout master 호스팅저장소를 연결하면 내 hugo/my-site/public 폴더가 생성 된 것을 확인 할 수 있는데 이 폴더 안의 내용들이 호스팅저장소에 노출 된다.\n호스팅저장소에 hugo 테마 적용\n현재 적용되어져 있는 mainroad 테마를 호스팅저장소에 적용한다. hugo -t mainroad → /hugo/my-site/public 아래 테마관련 파일들이 생성된 것을 확인 할 수 있다.\n저장소에 푸쉬 및 확인하기 수행 경로: /hugo/my-site\n배포 쉘 실행 # 커밋할 파일 추가 git add . # 커밋 내용 작성 git commit -am \u0026#39;최초 커밋\u0026#39; # 저장소에 푸쉬 git push origin master → github 에 접속하여 my-account/content-storage 저장소에 가보면 아래와 같이 파일들이 추가됨과 함께 public 폴더가 서브모듈로 포함되어 있는 것을 확인할 수 있다.\n","permalink":"https://someoneornobody.github.io/dev/hugo/hugo-with-github/","tags":["hugo","github"],"title":"[HUGO] Github 연동하기"},{"categories":["hugo"],"contents":"HUGO ? HUGO 는 GO 프로그래밍 언어로 작성된 오픈 소스 정적 사이트 (Static Site Generators) 생성기 입니다.\n정적 사이트 생성기란 서버측 처리없이 HTML, CSS, Javascript 파일로 제공되는 웹 사이트로 다양한 플랫폼에서 빠르고 안전하며 쉽게 호스팅 할 수 있습니다.\n다양한 케이스가 있겠지만 대표적인 방법으로는 github 저장소를 이용하여 콘텐츠 생성 및 호스팅을 하는 방법이 있습니다.\n아래 내용은 macOS 를 기준으로 작성 된 문서입니다 설치 brew 를 사용하여 hugo 를 설치합니다 # 최초 설치 시 brew install hugo # 설치확인 hugo version 다음 단계부터는 hugo 관련 파일들이 생성되기 때문에 작업 경로(실제로 hugo 사이트를 생성하고 관리할 경로) 로 이동해서 수행합니다 사이트 생성 신규 사이트 생성\nhugo new site {사이트명} → 아래의 폴더 및 파일이 생성됨을 확인 할 수 있습니다.\narchetypes\nassets\ncontent\ndata\nhugo.toml\nlayouts\nstatic\nthemes\n생성 된 폴더 및 파일에 대한 내용은 아래와 같습니다.\narchetypes : front matter 설정을 위한 default.md이 존재 content : 블로그에 올릴 글들이 저장되는 곳 data : 데이터 저장용. 싸이트에 보이지 않음 layouts : 여기에서 블로그에 실제로 적용되는 큰 틀을 가진 html들 static : css, js, img파일 등 추가 적인 기능 혹은 사진을 연결하기 위한 폴더 public: 위의 정보들을 기반으로 html로 생성된 웹페이지. 테마 적용 HUGO 에서는 이미 완성 또는 진행 중인 많은 테마들을 제공하고 있습니다. 해당 테마들은 아래 URL 에서 확인 후 마음에 드는 것으로 선택하시면 됩니다.\n테마 목록: https://themes.gohugo.io/\n제 경우 Mainroad 라는 테마를 사용하였습니다\n테마는 서브모듈로 설치하거나 clone 하여 사용하는 방법이 있습니다. 서브모듈로 설치할 경우 해당 테마에 대한 업데이트 등 패치에 손쉽게 반응 할 수 있습니다.\n하지만 제 경우에는 커스터마이징도 할겸.. clone 하여 진행하도록 하겠습니다.\n(사실 서브모듈로 배포 시 커스터마이징 한 부분이 적용 안되고 서브모듈에 의존하고 있는 소스를 기반으로 배포가 되어서 해당 부분을 처리하는 것을 아직 못찾았습니다.. 찾으면 업데이트 하도록 할게요@@;)\n테마 설치는 생성된 사이트로 경로로 이동하여 진행합니다.\n# submodule 로 진행할 경우 git submodule add https://github.com/Vimux/Mainroad.git themes/mainroad # git clone 으로 진행할 경우 git clone https://github.com/Vimux/Mainroad.git themes/mainroad 테마를 설치하게 되면 themes 폴더 안에 mainroad 라는 이름으로 폴더가 생성되어 있는 것을 확인 하실 수 있습니다.\n이제 이 테마를 사이트에 적용하기 위해서는 hugo.toml 파일을 수정해야 합니다\n(기존에는 config.toml 파일이었는데 hugo 0.110.0 버전 부터는 hugo.toml 로 변경되었습니다.)\n# default baseURL = \u0026#39;http://example.org/\u0026#39; languageCode = \u0026#39;en-us\u0026#39; title = \u0026#39;My New Hugo Site\u0026#39; # theme = {themes 아래 생성한 폴더명} theme= \u0026#39;mainroad\u0026#39; 실행 및 확인 아래는 hugo 명령어 입니다.\n# hugo --help 시 나오는 정보 hugo server --port=[port]: 포트지정 (default: 1313) --bind=[bindIP]: 서버가 외부와 연결될 인터페이스 (default: 127.0.0.1) --contentDir=[dir]: 컨텐츠 디렉터리 --themesDir=[dir]: 테마 디렉터리 --source=[dir]: 소스 디렉터리 (default 현재경로) --ignoreCache: ignore cache ( 게시글이 반영안될때 사용) -D: 서버 실행 시 미게시(draft) 상태의 글도 포함하여 노출한다. --liveReloadPort=[port]: 라이브리로드 포트 변경 (수정사항이 즉각 반영되는 것을 라이브리로드 라고 합니다) --navigateToChanged 마지막으로 수정한 페이지로 자동 리다이렉션 (baseURL 사용. 로컬에서 실행 시 appendPort 는 false) --appendPort=[true/false]: baseURL에 포트를 붙일건지 옵션 (default: true) # 컨텐츠 만들기 hugo new --kind=[type]: 콘텐츠 메타데이터 type을 지정해서 글쓰기 # 서버 실행 시 테마 적용 hugo -t mainroad # 서버 실행 시 미게시(draft) 상태의 문서도 조회 hugo server -D 아직 게시된 글이 없으므로 간단히 서버만 실행하여 확인해보도록 합니다.\nhugo server\n# 아래는 서버 싫행 로그 입니다. | EN -------------------+----- Pages | 7 Paginator pages | 0 Non-page files | 0 Static files | 5 Processed images | 0 Aliases | 3 Sitemaps | 1 Cleaned | 0 Built in 29 ms Environment: \u0026#34;development\u0026#34; Serving pages from memory Running in Fast Render Mode. For full rebuilds on change: hugo server --disableFastRender Web Server is available at http://localhost:1313/ (bind address 127.0.0.1) Press Ctrl+C to stop → 위 메시지를 확인하였다면 브라우저에서 http://localhost:1313 접속하여 확인합니다.\n","permalink":"https://someoneornobody.github.io/dev/hugo/hugo-start/","tags":["go","hugo","static site generators","ssg"],"title":"[HUGO] 시작하기"},{"categories":null,"contents":"No Results Found..\n","permalink":"https://someoneornobody.github.io/search/","tags":null,"title":"Search Results"}]