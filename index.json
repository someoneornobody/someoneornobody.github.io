[{"categories":["db"],"contents":" sql_mode 란? MySQL 이나 Mariadb 에서 데이터베이스 서버가 수행하는 SQL 작업의 동작 및 유효성(엄격성)을 정의하는 구성 설정입니다.\n이는 SQL 구문이나 데이터 유효성 검사, 오류 처리 등을 어떻게 처리할 지 결정하며,\nSQL 표준 및 데이터 무결성과 관련하여 데이터베이스의 호환성 및 동작에 영향을 미칠 수 있는 중요한 설정입니다. 구성 항목 (요소) ANSI_QUOTES 활성화 시 쌍따옴표 (\u0026quot;) 는 컬럼명, 테이블과 같은 식별자만 처리 할 수 있도록 한다.\nSELECT \u0026#34;COLUMN_NAME\u0026#34; FROM \u0026#34;TABLE_NAME\u0026#34; STRICT_TRANS_TABLE 컬럼 타입과 다를 경우 최대한 맞춰서 값을 입력하게 할 것인지 여부. OFF 상태일 경우 타입과 다르다면 오류 발생\nSTRICT_ALL_TABLE STRICT_TRANS_TABLE 과 유사하며 해당 트랜잭션이 아닌 전체 테이블에 대해 엄격성을 적용\nERROR_FOR_DIVISION_BY_ZERO 0 으로 나누는 것에 대한 유효성 처리 (MODE(N,0). ON 상태일 시 0 으로 나눈 것에 대해 INSERT 를 수행 시 NULL 이 들어가면 오류 발생\nNO_ZERO_TIME OFF 상태 일 시 datetime 필드에 값에 공백 입력 시 자동으로 날짜형식 (0000-00-00) 또는 시간형식(0000-00-00 00:00:00) 형식으로 등록\nNO_ZERO_IN_TIME ON 상태일 시 연, 월에 0 입력을 허용않는다 2023-00-12 08:57:11: 과 같은 데이터를 삽입하려 한다면 오류가 발생\nALLOW_INVALID_DATES ON 상태일 시, 잘못되지 않은 날짜의 삽입을 허용한다. 예를들어 2023-02-31 과 같이 유효하지 않은 날짜도 등록 가능\nONLY_FULL_GROUP_BY GROUP BY 시 SELECT 절의 모든 필드가 포함되어야 한다. (v5.7 에서 추가)\nNO_ENGINE_SUBSTITUTION ON 상태일 시, CREATE, ALTER 시 사용가능한 engine 이 아니라면 오류 발생\nNO_AUTO_CREATE_USER 사용자 계정 생성 처리 방법 중 하나로 MySQL 에서 클라이언트가 존재하지 않는 사용자 이름으로 데이터베이스 접속을 시도할 경우 기본동작은 해당 이름과 함께 빈 비밀번호를 사용하여 새 사용자 계정을 생성하는 것이지만 해당 옵션이 ON 상태라면 오류 메시지와 함꼐 연결을 거부함. 예시로 아래와 같은 수행이 불가능.\nmysql -u root -p \u0026lt; dump.sql 적용방법 쿼리로 바로 적용하기 현재 세션에만 설정하기\nSET SESSION sql_mode=ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION 전역으로 설정하기 SET GLOBAL sql_mode=ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION 쿼리로 설정할 경우 현재 세션이나 현재 실행중인 서버 상태만 적용되므로 서버 재기동이 발생 할 경우 해당 옵션이 적용되지 않게 된다. 그러므로 위와 같이 쿼리로 따로 설정을 해주더라도 설정을 일관되게 유지시켜 주고 싶다면 설정파일에 따로 선언을 해두는 것을 추천 한다. 설정파일에서 적용하기 my.cnf (또는 my.ini) 에서 아래와 같이 설정한다.\n... [mysqld] sql_mode=ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION ... 위와 같이 설정 파일에 선언을 해두면 업데이트 등으로 인한 서버 재기동이 발생하여도 기존 환경과 동일하게 적용되므로 관련된 오류 상황에 대비 할 수 있다.\n","permalink":"https://someoneornobody.github.io/dev/db/mysql-mariadb-sql-mode/","tags":["sql_mode","mysql","mariadb"],"title":"[Mysql,Mariadb] sql_mode 구성 항목 및 설정"},{"categories":["db"],"contents":" Mysql, Mariadb 사용 시 datetime 필드에 공백을 입력하고 싶거나\n혹은 기존까지 공백이 잘 들어갔는데 오류가 발생하는 케이스가 있을 경우 해결하는 내용입니다. 만약 기존에 아래의 쿼리처럼 datetime 필드에 공백을 넣었을 경우 문제가 없다가 갑자기 오류가 나는 상황이 발생하는 경우가 있습니다. UPDATE USER SET AGREE_DT = :AGREE_DT, AGREE_SEQ = :AGREE_SEQ WHERE USER_SEQ = :USER_SEQ Error 1292: Incorrect datetime value: '' for column 'AGREE_DT' at row 1\n만약, 이렇게 오류가 난다면 sql_mode 를 체크해봐야 합니다.\nSELECT @@sql_mode 위와 같이 쿼리를 수행하였을 때 조회되는 항목 중, NO_ZERO_DATE, NO_ZERO_IN_TIME 의 여부를 확인하여야 합니다.\n만약 항목이 조회 된다면 ON 상태이고 조회되지 않는다면 OFF 상태 입니다.\n먼저 이 두 가지 옵션에 대해 알아보면..\nNO_ZERO_TIME 은 만약 공백으로 datetime 필드에 값을 입력 시 자동으로 0000-00-00 00:00:00 형식으로 등록되게 해줍니다.\nNO_ZERO_IN_TIME 은 연, 월에 0 입력을 허용하지 않는다는 것으로 만약 2023-00-12 08:57:11 과 같은 데이터를 삽입하려 한다면 오류가 발생하게 됩니다.\n만약 공백으로 입력시 기본값으로 0000-00-00 00:00:00 이 들어가게 하게 하고 싶다면 OFF 상태여야 하고\n정상적인 datetime 형태로만 등록이 가능하게 하고 싶다면 ON 상태여야 합니다.\n위 옵션에 대해 ON/OFF 를 설정하고 싶다면 아래와 같은 쿼리를 수행하면 됩니다.\nSET SESSION sql_mode=\u0026#39;STRICT_TRANS_TABLE,NO_ZERO_TIME,NO_ZERO_IN_DATE\u0026#39; STRICT_TRANS_TABLE 옵션은 요청 트랜잭션에 대해 데이터 검증 및 처리를 담당하는 옵션으로 명시적으로 ON 상태를 유지하도록 합니다.\n만약 GLOBAL 로 설정하고 싶다면 super 권한 (ex:root) 을 가진 계정으로 아래와 같이 수행하면 됩니다.\nSET GLOBAL sql_mode=\u0026#39;STRICT_TRANS_TABLE,NO_ZERO_DATE,NO_ZERO_IN_DATE\u0026#39; sql_mode 에 대해 조금 더 자세한 내용을 알고 싶다면 이곳 를 참고하시기 바랍니다.\n","permalink":"https://someoneornobody.github.io/dev/db/mysql-mariadb-datetime-white-space/","tags":["mysql","mariadb","NO_ZERO_DATE","NO_ZERO_IN_DATE","datetime","sql_mode"],"title":"[Mysql-Mariadb] datetime 에 공백 넣기(NO_ZERO_DATE, NO_ZERO_IN_DATE)"},{"categories":["hugo"],"contents":" 개요 본 게시물은 hugo 의 Mainroad 테마를 기준으로 작성되었습니다. 이는 아래 작성된 내용들이 환경이나 표준과 다를 수 있음을 의미합니다. 파일 생성 수행 경로: hugo 사이트 생성 경로 (hugo/my-site)\nhugo new {경로/파일명.md} 를 통해 작성할 게시물 파일을 생성하는데, 이렇게 생성된 파일은\nhugo/my-site/content\n폴더 아래 자동으로 생성됩니다. 생성 된 파일은 hugo/my-site/archetypes/default.md 에 작성된 템플릿을 기반으로 기본적인 내용이 작성되어져 있습니다..\nhugo new dev/hugo/hugo.md hugo/my-site/content/dev/hugo/hugo.md 에 파일 생성. 내용 작성 해당 md 파일에 게시할 내용을 markdown 문법으로 작성함으로써 글 작성에 대한건 사실 끝입니다. (\u0026hellip; 별거 없..)\n다만, 문법을 알고 작성해야 텍스트 편집기로 대충 쓴 것 처럼 나오지 않으므로 아래 문법을 참고하여 작성하도록 합니다.\n문법 하기 문법은 hugo-Mainroad 테마 을 참고하여 작성되었으며 해당 테마에 최적화 되었으므로 일반적인 마크다운 문법과 약간 다를 수 있습니다.\n글자색 굵기 (BOLD)\n** 별표2개 ** 글자 기울이기 (ITALIC) * 별표1개 * _ 또는 밑줄 _ 링크 [대괄호에노출문구](괄호에주소) 공간 한줄 띄우기 ... 앞 문장에서 엔터처리 후.. \u0026amp;nbsp; 순번 리스트 1. First line 2. Second line 3. Third line 순번없는 리스트 * First line * Second line * Third line 중첩 리스트 * first line * first - 1 line * first - 1 - 1 line 목차\nhugo.toml 파일 수정 ... [Params] toc = true ... ## 1 뎁스 ### 2 뎁스 #### 3 뎁스 인용\n# 한줄 표현 \u0026gt; 인용 부분. \u0026gt; 여기가 인용이에요.. # 여러줄 표현 (붙여쓰기) \u0026gt; 한줄쓰고 오른쪽에 띄어쓰기를 두번 해줘야해요 (스페이스바)(스페이스바) \u0026gt; 그리고 여기에 쓰면 두줄이 붙어서 보이게 됩니다. # 여러줄 표현 (한줄 띄우기) \u0026gt; 여기도 인용이고 \u0026gt; \u0026gt; 여기도 인용이네요? \u0026gt; \u0026gt; 이렇게 그냥 빈줄을 놔두시면 돼요.. \u0026gt; 테이블 # 기본 테이블 | COL_1 | COL_2 | COL_3 | COL_4 | | ------- | ------- | ------- | ------- | | ROW_1_1 | ROW_1_2 | ROW_1_3 | ROW_1_4 | | ROW_2_1 | ROW_2_2 | ROW_2_3 | ROW_2_4 | # 테이블 정렬 ( 콜론 (:) 위치에 따라서 정렬된다) | COL_1 | COL_2 | COL_3 | | :------ | :-------: | ------: | | 좌측정렬| 가운데정렬| 우측정렬| # 테이블에 마크다운 적용도 가능 | 기울이기 | 굵게 | 취소선 | 강조 | | *italic* | **bold** | ~~cancel~~ | `effect` | 코드 블럭 ```markdown 여기는 마크다운 코드블럭입니다. Mainroad theme 에서 ```{타입} 으로 설정 시 해당 타입에 맞는 코드블럭 스타일로 작성됩니다. ```html 이렇게 하면 HTML 코드블럭이 되는거죠... ``` ``` 강조 `back quote` 으로 씌어진 곳은 옅은 회색 배경과 빨간색으로 문구가 강조됩니다 이미지 업로드 이미지를 별도 웹사이트에 존재 하는걸 노출할게 아니라면 현재 테마 폴더 내에 위치시켜야 합니다. Mainroad 기준 이미지가 위치할 기본 경로는 hugo/my-site/theme/mainroad/static/img/ 입니다. 그리고 경로는 /img 부터 작성하도록 합니다. (아래 예시는 위 기본 경로 아래로 posts/hugo 폴더를 생성하여 hugo-image.png 파일을 위치 시킴) ![이미지설명](이미지경로) 예시) ![picture_description](/img/posts/hugo/hugo-image.png) ","permalink":"https://someoneornobody.github.io/dev/hugo/hugo-write-article/","tags":["hugo","이미지업로드"],"title":"[HUGO] 글작성, 문법, 이미지업로드 하기"},{"categories":["server"],"contents":" 개요 및 준비사항 - Apache 설치 시 OS에 필요한 라이브러리들이 없다고 가정하고(가끔 인프라쪽에 서버 생성 요청할때.. 정말 아무 라이브러리도 없는 쌩 서버만 주는 경우가 있죠..) , 필요한 라이브러리들 부터 순차적으로 설치 후 apache 를 설치하는 내용입니다.\n- 서버 설치 환경은 CentOS 7.5 버전 입니다\nApache 소스 컴파일 설치 시 필요한 라이브러리 (괄호안의 숫자는 현 문서에서 다루는 버전입니다) apache (v2.2.34)\nApache Http server. 웹 서버. download: https://httpd.apache.org/download.cgi apr (v1.7.0)\nApache Portable Runtime 의 약자. 플랫폼에 종속되지 않고 동작하기 위해 필요한 라이브러리. download: https://apr.apache.org/download.cgi apr-util (v1.6.1)\napr 유틸리티 라이브러리. DB 연결, LDAP연동, XML 파싱, 데이터 암호화 등의 유틸리티 라이브러리. download: https://apr.apache.org/download.cgi expat (v2.2.9)\nC언어 라이브러리로 만들어진 XML Parser. 위에 언급한 apr 모돌과의 인터페이스 처리 담당. download: https://github.com/libexpat/libexpat/releases zlib (v1.2.11)\n데이터 압축, 해제 라이브러리. 압축 데이터 저장 및 전송 처리. download: https://www.zlib.net/ openssl (v1.0.1u)\n암호화, 보안 프로토콜 통신 처리 라이브러리. 사이트 구성 시 SSL 처리 시 필요. download: https://www.openssl.org/source/ 프로그램 설치 프로그램 설치 경로: /user/path 설치 프로그램 위치 경로: `/user/path/app expat-2.2.9 tar.gz 압축 해제 cd /user/path/app tar –xzvf expat-2.2.9.tar.gz configure 설정 cd /user/path/app/expat-2.2.9 ./configure --prefix=/user/path/lib/expat-2.2.9 prefix: 설치 경로 컴파일 make 설치 make install 설치 경로로 이동하여 파일 확인 cd /user/path/lib/expat-2.2.9 apr-1.7.0 tar.gz 압축 해제 cd /user/path/app tar –xzvf apr-1.7.0.tar.gz configure 설정 cd /user/path/app/apr-1.7.0 cp –arp libtool libtoolT ./configure --prefix=/user/path/lib/apr-1.7.0 컴파일 및 설치 make \u0026amp;\u0026amp; make install 설치 경로로 이동하여 파일 확인 cd /user/path/lib/apr-1.7.0 apr-util-1.6.1 tar.gz 압축 해제 cd /user/path/app tar –xzvf apr-util-1.6.1.tar.gz configure 설정 cd /user/path/app/apr-util-1.6.1 ./configure --prefix=/user/path/lib/apr-util-1.6.1 --with-apr=/user/path/lib/apr-1.7.0 --with-expat=/user/path/lib/expat-2.2.9 컴파일 및 설치 make \u0026amp;\u0026amp; make install 설치 경로로 이동하여 파일 확인 cd /user/path/lib/apr-util-1.6.1 zlib01.2.11 tar.gz 압축 해제 cd /user/path/app tar –xzvf zlib-1.2.11.tar.gz configure 설정 cd /user/path/app/zlib-1.2.11 ./configure --prefix=/user/path/lib/zlib-1.2.11 컴파일 및 설치 make \u0026amp;\u0026amp; make install 모듈 변경 및 설정 파일 수정 # zlib 압축해제 폴더로 이동 cd /user/path/app/zlib-1.2.11 # libz.so 파일 zlib 설치 폴더로 복사 cp libz.so* /user/path/lib/zlib-1.2.11 # zlib 설치 폴더로 이동 cd /user/path/lib/zlib-1.2.11 # libz.so 파일 삭제 및 링크 설정 rm -f libz.so rm -f libz.so.1 ln -s libz.so.1.2.11 libz.so ln -s libz.so.1.2.11 libz.so.1 # /etc/ld.so.conf 설정 파일에 zlib 경로 추가 echo /user/path/lib/zlib-1.2.11 \u0026gt;\u0026gt; /etc/ld.so.conf # 설정파일 반영 ldconfig openssl-1.0.1u tar.gz 압축 해제 cd /user/path/app tar -xzvf openssl-1.0.1u.tar.gz configure 설정 cd /user/path/app/openssl-1.0.1u ./config --prefix=/user/path/lib/openssl --openssldir=/user/path/cert shared threads --with-zlib-lib=/user/path/lib/zlib-1.2.11 컴파일 및 설치 make \u0026amp;\u0026amp; make install 설피 경로로 이동하여 파일 확인 cd /user/path/lib/openssl openssl 경로 설정 export LD_LIBRARY_PATH=/user/path/lib/openssl/lib export 명령어로 확인 export Apache tar.gz 압축 해제 cd /user/path/app tar -xzvf httpd-2.2.34.tar.gz configure 설정 cd /user/path/app/httpd-2.2.34 ./configure --prefix=/user/path/web --enable-modules=all --enable-mods-shared=all --enable-so --enable-ssl --with-ssl=/user/path/lib/openssl --with-mpm=prefork --with-apr=/user/path/lib/apr-1.7.0 --with-apr-util=/user/path/lib/apr-util-1.6.1 --with-expat=/user/path/lib/expat-2.2.9 --with-z=/user/path/lib/zlib-1.2.11 컴파일 및 설치 make clean make make install 설치 경로로 이동하여 버전 확인하여 설치 확인 cd /user/path/web/bin ./httpd -version Web 서버 동작 확인\nhttpd.conf 파일 내 ServerName 을 localhost:80 으로 변경한다. cd /user/path/web/conf ... ServerName localhost:80 ... vi httpd.conf Apache 서버 실행 cd /user/path/web/bin ./apachectl start 브라우저 에서 접속 확인 주소창에 http://localhost 입력하여 It works 문구 확인 Apache 서버 중지 cd /user/path/web/bin ./apachectl stop 모듈 추가 아래는 Apache 사용 시 모듈을 추가하는 방법이다. 예시는 proxy 모듈로 작성되었다.\nApache 압축해제 폴더로 이동한다. (설치 폴더가 아닌 설치 압축파일의 해제 경로)\n# 압축파일 해제 경로 내 proxy 모듈 경로로 이동 cd /user/path/app/httpd-2.2.34/modules/proxy # 모듈 컴파일 및 추가 # {경로} -aic {모듈.c} /user/path/web/bin/apxs -aic mod_proxy.c proxy_util.c /user/path/web/bin/apxs -aic mod_proxy_http.c proxy_util.c /user/path/web/bin/apxs -aic mod_proxy_connect.c proxy_util.c /user/path/web/bin/apxs -aic mod_proxy_ajp.c proxy_util.c ajp_header.c ajp_utils.c ajp_link.c ajp_msg.c /user/path/web/bin/apxs -aic mod_proxy_balancer.c proxy_util.c /user/path/web/bin/apxs -aic mod_proxy_scgi.c** 아파치가 설치된 경로 내 모듈 디렉토리로 이동하여 모듈 설치 확인 cd /user/path/web/modules 아래의 모듈들을 확인한다\nmod_proxy.so\nmod_proxy_ajp.so\nmod_proxy_balancer.so\nmod_proxy_connect.so\nmod_proxy_http.so\nmod_proxy_scgi.so\nmod_ssl.so\n","permalink":"https://someoneornobody.github.io/dev/server/apache-binary-install/","tags":["apache","binary","apr","extpat","manual","module","proxy"],"title":"[Apache] 아파치 2.2.34 바이너리 설치"},{"categories":["javascript"],"contents":" BFCache ? BFCache 란 Back-forward Cache 의 약자로 브라우저가 현재 페이지의 상태를 저장하는 것을 말한다. 현재 페이지의 상태라 함은 페이지의 DOM상태, Javascript, Input, 스크롤 위치 등의 데이터가 포함될 수 있다.\n사용자가 브라우저에서 뒤로가기 또는 앞으로 가기 버튼을 클릭 하였을 때 처음 이동하는 페이지보다 월등히 더 빠르게 렌더링 된 페이지를 볼 수 있는 이유는 이러한 BFCache 로 인해 캐싱된 페이지를 보기 때문이다.\n사용자 관점에서는 매우 효과적이고 효율적인 기능이지만 개발자 입장에서는 상황에 따라 손이 한번 더 가는 경우가 발생한다. 예를들면 보통 페이지가 로딩되면 사용자는 알지 못하는 많은 이벤트가 발생한다.\n페이지를 초기화하기 위한 이벤트나 함수를 호출하는 코드들은 페이지가 로드 될 때 호출되게 되는데 뒤로가기나 앞으로가기를 하였을 경우에는 BFCache 로 인해 정상적으로 작동하지 않기 때문이다. (대표적으로 여러 플랫폼들에서의 사이트 방문자 추적, 집계를 위한 스트립트가 있는데 BFCache 에 의해 로드 된 페이지에서는 정상적으로 집계가 되지않는다고 한다)\n대응 1. BFCache 체크 이러한 문제에 대응하기 위해서는 아래의 이벤트로 BFCache 로 캐싱된 페이지 여부를 체크하는 방법이 있다. 먼저 아래의 소스를 살펴보자.\nwindow.onpageshow = function(event) { // Back Forward Cache로 브라우저가 로딩될 경우 혹은 브라우저 뒤로가기 했을 경우 if ( event.persisted || ( window.performance \u0026amp;\u0026amp; ( (window.performance.navigation \u0026amp;\u0026amp; window.performance.navigation.type == 2) || (window.performance.getEntriesByType(\u0026#34;navigation\u0026#34;) \u0026amp;\u0026amp; window.performance.getEntriesByType(\u0026#34;navigation\u0026#34;)[0].type) ) ) { // 캐싱 처리된 페이지에요~ } } BFCache 여부는 pageshow 이벤트의 persisted 프로퍼티를 이용하여 알 수 있다.\n그 다음으로 추가 된 조건은 브라우저의 navigation 에 대한 상태를 체크하는 것인데 navigation 의 type 값에 따른 내용은 아래와 같다.\n0: URL을 통한 직접 접근 1: 페이지 새로고침을 통한 접근 2: 뒤로가기 또는 앞으로가기의 히스토리를 통한 접근 이렇게 두 가지 조건을 참고해서 혹시나 브라우저 종류나 같은 브라우저라도 브라우저 버전별에 따라 정상동작하지 않는 경우를 최소화 할 수 있다.\n2. 브라우저 캐시 미사용 현재는 거의 대다수의 브라우저에서 위의 방법으로 문제 해결 처리가 가능하지만.. 아~~주 오래된 구브라우저도 지원해야 할 정도로 정말 많은 브라우저를 지원하는 사이트이고 이러한 문제에 대해 애초에 신경쓰기 싫다면 HTML 메타 태그를 사용해 BFCache 를 허용하지 않는 방법도 있다.\n아래 메타태그 선언은 캐시처리를 하지 않도록 설정한다.\n\u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta http-equiv=\u0026#34;Cache-Control\u0026#34; content=\u0026#34;no-cache\u0026#34; /\u0026gt; \u0026lt;meta http-equiv=\u0026#34;Pragma\u0026#34; content=\u0026#34;no-cache\u0026#34; /\u0026gt; \u0026lt;meta http-equiv=\u0026#34;Expires\u0026#34; content=\u0026#34;0\u0026#34; /\u0026gt; ... Cache-Control 헤더는 웹브라우저에게 페이지 또는 리소스 캐싱 동작을 지정하며 설정 값들은 아래와 같다.\npublic: 응답 데이터 캐시 가능. 공용 캐시에 저장될 수 있다. private: 응답 데이터를 개별 사용자 캐시에 저장. 공용 캐시에 저장되지 않는다. no-store: 데이터를 캐시하지 않는다. max-age={seconds}: 데이터 캐시 저장 시간(초) 설정 Pragma 헤더는 예전 HTTP/1.0 에서 사용된 캐싱 관련 지시자이며 HTTP/1.1 에서는 Cache-Control 헤더로 대체 되었으므로 잘 쓰진 않지만 혹시 모르니\u0026hellip;\nExpires 헤더는 캐시의 만료 시간 지정. 브라우저는 해당 시간 이후의 요청에 대해서는 리소스를 대로 가져와서 업데이트를 해야 한다. 이렇게 캐시처리를 하지 않으면 BFCache 에 대해서는 어느정도 자유로움을 보장 할 수 있겠지만\u0026hellip; 네트워크 트래픽, 서버부하, 페이지 로딩으로 인한 사용자 불편함 등이 발생 할 수 있으니.. 무작정 사용하지 않기 보다는 상황, 경우에 따라 BFCache 를 적절히 처리하거나 캐싱을 하지 않는 것들을 적절히 섞어서 사용하는게 올바르지 않나 생각해본다.\n","permalink":"https://someoneornobody.github.io/dev/javascript/bf-cache/","tags":["bfcache","cache","뒤로가기"],"title":"[Javascript] 브라우저 뒤로가기 처리 (BFCache, Back-forward cache)"},{"categories":["db"],"contents":" MySQL / Mariadb 명령어 root 접속 (mysql 폴더 / bin 으로 이동해서 수행) ./mysql -u root -p 사용자 목록 use mysql; select user, host from user; 비밀번호 변경 mysqladmin -u아이디 -p기존패스워드 password 신규패스워드 인덱스 초기화 ALTER TABLE [table name] AUTO_INCREMENT = 1; 현재 커넥션 개수 보기 show global status like \u0026#39;threads_connected\u0026#39;; datetime #unix_time -\u0026gt; date_time from_unixtime( signdate , \u0026#34;%Y%m%d-%H%i%S\u0026#34;) MySQL 외부 접근 권한\n%: 외부접근 localhost: 내부접근 권한설정 #gtane all privileges on {db}.{table} to {user}@{ip} identified by \u0026#39;root password\u0026#39; grant all privileges on *.* to ‘root’@\u0026#39;%’ identified by ‘root의 패스워드’; 모든IP허용 INSERT INTO mysql.user (host,user,password) VALUES (‘%’,\u0026#39;root’,password(‘패스워드’)); GRANT ALL PRIVILEGES ON *.* TO ‘root’@\u0026#39;%’; FLUSH PRIVILEGES; IP대역 허용 INSERT INTO mysql.user (host,user,password) VALUES (\u0026#39;111.222.%\u0026#39;,\u0026#39;root\u0026#39;,password(\u0026#39;패스워드\u0026#39;)); GRANT ALL PRIVILEGES ON *.* TO \u0026#39;root\u0026#39;@\u0026#39;111.222.%\u0026#39;; FLUSH PRIVILEGES; 특정 IP 허용 INSERT INTO mysql.user (host,user,password) VALUES (\u0026#39;111.222.33.44\u0026#39;,\u0026#39;root\u0026#39;,password(\u0026#39;패스워드\u0026#39;)); GRANT ALL PRIVILEGES ON *.* TO \u0026#39;root\u0026#39;@\u0026#39;111.222.33.44\u0026#39;; FLUSH PRIVILEGES; 원복 DELETE FROM mysql.user WHERE Host=\u0026#39;%\u0026#39; AND User=\u0026#39;root\u0026#39;; FLUSH PRIVILEGES; mysql.user 테이블의 password 변경 update user set password = password(\u0026#39;new password\u0026#39;) where user = \u0026#39;username\u0026#39;; Error Code : 1175 일 시 세이프 모드를 해제 한 후 적용한다.\nset sql_safe_updates = 0; -\u0026gt; 세이프 모드 해제\nset sql_safe_updates = 1; -\u0026gt; 세이프 모드 적용\nmysql 서버에 직접 접속하여 변경할 경우 flush privileges; 커맨드도 꼭 해주어야 한다.\n데이터베이스 목록 show databases; 사용자추가 #외부 create user \u0026#39;userid\u0026#39;@\u0026#39;%\u0026#39; identified by \u0026#39;user password\u0026#39;; #내부 create user \u0026#39;userid\u0026#39;@\u0026#39;localhost\u0026#39; identified by \u0026#39;user password\u0026#39;; insert into user (host, user, password) values (\u0026#39;localhost\u0026#39;, \u0026#39;userid\u0026#39;, \u0026#39;password(user password\u0026#39;)); 사용자제거 drop user \u0026#39;userid\u0026#39;; delete from user where user = \u0026#39;userid\u0026#39;; 권한주기 #전체권한 (SELECT, DELETE, UPDATE, INSERT) grant all privileges on dbname.table to userid@host identified by \u0026#39;password\u0026#39;; grant select, insert, update on dbname.table to userid@host identified by \u0026#39;password\u0026#39;; grant select, insert, update on dbname.table to userid@\u0026#39;192.168.%\u0026#39; identified by \u0026#39;password\u0026#39;; 권한 적용 flush privileges; 권한 삭제 revoke all on dbname.table from userid@host 권한 확인 show grants for userid@host show grants for \u0026#39;userid\u0026#39;@\u0026#39;%\u0026#39;; LOCK 확인 (root 등 권한이 있는 사용자로 조회) # lock_id select * from information_schema.innodb_locks; LOCK 대기 상태 select * from information_schema.innodb_lock_waits; 트랜잭션 진행 확인 # trx_mysql_thread_id select * from information_Schema.innodb_trx; LOCK 해제 kill {lock_id}; ","permalink":"https://someoneornobody.github.io/dev/db/mysql-mariadb-commands/","tags":["mysql","mariadb","명령어"],"title":"[MySQL/MariaDB] 명령어"},{"categories":["vue"],"contents":" 아래는vue3 에서 script setup 방식으로 전역변수를 사용하는 예제 입니다. 전역변수 설정 case 1 provide 를 사용하여 전역변수를 설정하는 방법. file: main.js ... const appTitle = \u0026#39;hello nobody\u0026#39; const app = createApp(app) .provide(\u0026#39;$title\u0026#39;, appTitle) .mount(\u0026#39;#app\u0026#39;) case 2 config.globalProperties 를 사용하는 방식으로 provide 와 동일하게 vue3 에서 전역 애플리케이션 인스턴스에 속성을 추가할 수 있는 기능. file: main.js ... const appTitle = \u0026#39;hello nobody\u0026#39; const app = createApp(app) ... app.config.globalProperties.$title = appTitle ... `` 전역변수 사용 case 1 inject 방식을 사용하는 방법. 일반적이며 간략하기 때문에 추천하는 방법. \u0026lt;script setup\u0026gt; import { inject, ref } from \u0026#39;vue\u0026#39; const title = inject(\u0026#39;$title\u0026#39;) console.log(title) ... \u0026lt;/script\u0026gt; case 2 getCurrentInstance 방식을 사용하는 방법. proxy 인스턴스를 호출하여 사용하는 방법. \u0026lt;script setup\u0026gt; import { getCurrentInstance, ref } from \u0026#39;vue\u0026#39; const { proxy } = getCurrentInstance() console.log(proxy.$title) ... \u0026lt;/script\u0026gt; ","permalink":"https://someoneornobody.github.io/dev/vue/use-global-properties/","tags":["vue3","전역변수","provide","inject","getCurrentInstance"],"title":"[Vue] 전역 변수 사용하기"},{"categories":["news"],"contents":" 본 게시글은 개인적인 참고를 위해 작성되었으므로 제게 필요한 정보만 간략히 모아두었습니다\n이미지의 출처는 공식홈페이지 (https://apple.com) 입니다\n가격 모델 128G 256G 512G 1TB 15 125만원 140만원 170만원 X 15 PLUS 135만원 150만원 180만원 X 15 PRO 155만원 170만원 200만원 X 15 PRO MAX X 190만원 220만원 250만원 CPU, RAM 모델 CPU RAM 15, 15 PLUS A16 (iPhone14 Pro 와 동일) 6G 15 PRO, 15 PRO MAX A17 Pro (3나노 공정) 8G 색상 모델 색상 15 , 15 PLUS BLUE, PINK, YELLOW, GREEN, BLACK 15 PRO, 15 PRO MAX NATURAL TITAN, BLUE TITAN, WHITE TITAN, BLACK TITAN 기타 카메라 15 PRO: 0.5배, 1배, 2배, 3배 광학 줌 15 PRO MAX: 0.5배, 1배, 2배, 5배 광학 줌 출시예정일 미국: 9/15 pre order, 9/22 수령 한국 (예상): 10/6 사전예약, 10/13 수령 connector 15, 15 PLUS: USB 2 15 PRO, 15 PRO MAX: USB 3 ","permalink":"https://someoneornobody.github.io/life/news/iphone15/","tags":["iphone","iphone15"],"title":"[NEWS] iPhone15"},{"categories":["hugo"],"contents":" 개요 HUGO 를 사용하여 SSG (Static Site Generators) 를 운영하는 대표적인 방법 중 하나는 github 저장소 를 이용하는 것입니다. github 를 통하여 서비스 시 별도의 비용도 발생하지 않고 다양한 플러그인들 지원을 통해 여러가지 기능을 손쉽게 적용 할 수 있는 장점이 있습니다.\n아래는 HUGO 를 통해 github 에 게시글을 작성하고 노출 시키는방법에 대해 설명해 보고자 합니다.\ngit repository 생성 먼저 github 에 가입 후 아래와 같이 2개의 repository 를 생성하도록 합니다.\n작업저장소 ( 게시글을 작성하고 저장할 저장소이며 실제 노출되는 저장소는 아님)\n→ github.com/my-account/content-storage\n호스팅저장소 (작업저장소에서 작성 된 게시글을 실제 사용자들이 볼 수 있는 저장소)\n→ content-hosting.github.io\n작업저장소 및 호스팅저장소 생성 후 로컬에서 푸쉬할 때 인증을 위해 token 을 미리 발급한다. 토큰은 github.com 에 로그인 후 우측 상단의 프로필 \u0026gt; settings \u0026gt; Developer Settings \u0026gt; Personal access tokens 메뉴에서 Create new token 버튼을통해 생성 할 수 있으며 권한은 repo 정도로만주고 진행한다.\ngithub 의 계정설정에서 (우측 상단 프로필 \u0026gt; Settings \u0026gt; Repositories \u0026gt; Repository default branch) 가 기본으로 main 으로 되어 있다면 master 로 변경한다.\n호스팅저장소는 저장소 생성 시 readme.md 파일을 생성하도록 한다. 그렇지 않으면 서브모듈로 추가 시 master 저장소가 비어서 정상적으로 연결되지 않을 수 있다\n저장소 연결하기 앞서 HUGO 시작하기 에서 저는 hugo new site my-site 로 생성하였기 때문에 수행 경로를 hugo/my-site 라 칭하겠습니다.\n작업저장소 연결하기 수행 경로: hugo/my-site\n# git 초기화 git init # 저장소 연결 git remote add origin https://github.com/my-account/content-storage # 저장소 이동 git branch -M master # 커밋 git add . git commit -am \u0026#39;initialize commit\u0026#39; git push -u origin master 호스팅저장소 연결하기 수행 경로: hugo/my-site\n# submodule 로 연결하여 준다 git submodule add -b master https://github.com/my-account/content-hosting.github.io.git public # submodule 저장소로 이동 cd ./public # 현재 저장소 확인 git status # master 가 아닐 경우 master 로 변경 git checkout master 호스팅저장소를 연결하면 내 hugo/my-site/public 폴더가 생성 된 것을 확인 할 수 있는데 이 폴더 안의 내용들이 호스팅저장소에 노출 된다.\n호스팅저장소에 hugo 테마 적용\n현재 적용되어져 있는 mainroad 테마를 호스팅저장소에 적용한다. hugo -t mainroad → /hugo/my-site/public 아래 테마관련 파일들이 생성된 것을 확인 할 수 있다.\n저장소에 푸쉬 및 확인하기 수행 경로: /hugo/my-site\n배포 쉘 실행 # 커밋할 파일 추가 git add . # 커밋 내용 작성 git commit -am \u0026#39;최초 커밋\u0026#39; # 저장소에 푸쉬 git push origin master → github 에 접속하여 my-account/content-storage 저장소에 가보면 아래와 같이 파일들이 추가됨과 함께 public 폴더가 서브모듈로 포함되어 있는 것을 확인할 수 있다.\n","permalink":"https://someoneornobody.github.io/dev/hugo/hugo-with-github/","tags":["hugo","github"],"title":"[HUGO] Github 연동하기"},{"categories":["hugo"],"contents":"HUGO ? HUGO 는 GO 프로그래밍 언어로 작성된 오픈 소스 정적 사이트 (Static Site Generators) 생성기 입니다.\n정적 사이트 생성기란 서버측 처리없이 HTML, CSS, Javascript 파일로 제공되는 웹 사이트로 다양한 플랫폼에서 빠르고 안전하며 쉽게 호스팅 할 수 있습니다.\n다양한 케이스가 있겠지만 대표적인 방법으로는 github 저장소를 이용하여 콘텐츠 생성 및 호스팅을 하는 방법이 있습니다.\n아래 내용은 macOS 를 기준으로 작성 된 문서입니다 설치 brew 를 사용하여 hugo 를 설치합니다 # 최초 설치 시 brew install hugo # 설치확인 hugo version 다음 단계부터는 hugo 관련 파일들이 생성되기 때문에 작업 경로(실제로 hugo 사이트를 생성하고 관리할 경로) 로 이동해서 수행합니다 사이트 생성 신규 사이트 생성\nhugo new site {사이트명} → 아래의 폴더 및 파일이 생성됨을 확인 할 수 있습니다.\narchetypes\nassets\ncontent\ndata\nhugo.toml\nlayouts\nstatic\nthemes\n생성 된 폴더 및 파일에 대한 내용은 아래와 같습니다.\narchetypes : front matter 설정을 위한 default.md이 존재 content : 블로그에 올릴 글들이 저장되는 곳 data : 데이터 저장용. 싸이트에 보이지 않음 layouts : 여기에서 블로그에 실제로 적용되는 큰 틀을 가진 html들 static : css, js, img파일 등 추가 적인 기능 혹은 사진을 연결하기 위한 폴더 public: 위의 정보들을 기반으로 html로 생성된 웹페이지. 테마 적용 HUGO 에서는 이미 완성 또는 진행 중인 많은 테마들을 제공하고 있습니다. 해당 테마들은 아래 URL 에서 확인 후 마음에 드는 것으로 선택하시면 됩니다.\n테마 목록: https://themes.gohugo.io/\n제 경우 Mainroad 라는 테마를 사용하였습니다\n테마는 서브모듈로 설치하거나 clone 하여 사용하는 방법이 있습니다. 서브모듈로 설치할 경우 해당 테마에 대한 업데이트 등 패치에 손쉽게 반응 할 수 있습니다.\n하지만 제 경우에는 커스터마이징도 할겸.. clone 하여 진행하도록 하겠습니다.\n(사실 서브모듈로 배포 시 커스터마이징 한 부분이 적용 안되고 서브모듈에 의존하고 있는 소스를 기반으로 배포가 되어서 해당 부분을 처리하는 것을 아직 못찾았습니다.. 찾으면 업데이트 하도록 할게요@@;)\n테마 설치는 생성된 사이트로 경로로 이동하여 진행합니다.\n# submodule 로 진행할 경우 git submodule add https://github.com/Vimux/Mainroad.git themes/mainroad # git clone 으로 진행할 경우 git clone https://github.com/Vimux/Mainroad.git themes/mainroad 테마를 설치하게 되면 themes 폴더 안에 mainroad 라는 이름으로 폴더가 생성되어 있는 것을 확인 하실 수 있습니다.\n이제 이 테마를 사이트에 적용하기 위해서는 hugo.toml 파일을 수정해야 합니다\n(기존에는 config.toml 파일이었는데 hugo 0.110.0 버전 부터는 hugo.toml 로 변경되었습니다.)\n# default baseURL = \u0026#39;http://example.org/\u0026#39; languageCode = \u0026#39;en-us\u0026#39; title = \u0026#39;My New Hugo Site\u0026#39; # theme = {themes 아래 생성한 폴더명} theme= \u0026#39;mainroad\u0026#39; 실행 및 확인 아래는 hugo 명령어 입니다.\n# hugo --help 시 나오는 정보 hugo server --port=[port]: 포트지정 (default: 1313) --bind=[bindIP]: 서버가 외부와 연결될 인터페이스 (default: 127.0.0.1) --contentDir=[dir]: 컨텐츠 디렉터리 --themesDir=[dir]: 테마 디렉터리 --source=[dir]: 소스 디렉터리 (default 현재경로) --ignoreCache: ignore cache ( 게시글이 반영안될때 사용) -D: 서버 실행 시 미게시(draft) 상태의 글도 포함하여 노출한다. --liveReloadPort=[port]: 라이브리로드 포트 변경 (수정사항이 즉각 반영되는 것을 라이브리로드 라고 합니다) --navigateToChanged 마지막으로 수정한 페이지로 자동 리다이렉션 (baseURL 사용. 로컬에서 실행 시 appendPort 는 false) --appendPort=[true/false]: baseURL에 포트를 붙일건지 옵션 (default: true) # 컨텐츠 만들기 hugo new --kind=[type]: 콘텐츠 메타데이터 type을 지정해서 글쓰기 # 서버 실행 시 테마 적용 hugo -t mainroad # 서버 실행 시 미게시(draft) 상태의 문서도 조회 hugo server -D 아직 게시된 글이 없으므로 간단히 서버만 실행하여 확인해보도록 합니다.\nhugo server\n# 아래는 서버 싫행 로그 입니다. | EN -------------------+----- Pages | 7 Paginator pages | 0 Non-page files | 0 Static files | 5 Processed images | 0 Aliases | 3 Sitemaps | 1 Cleaned | 0 Built in 29 ms Environment: \u0026#34;development\u0026#34; Serving pages from memory Running in Fast Render Mode. For full rebuilds on change: hugo server --disableFastRender Web Server is available at http://localhost:1313/ (bind address 127.0.0.1) Press Ctrl+C to stop → 위 메시지를 확인하였다면 브라우저에서 http://localhost:1313 접속하여 확인합니다.\n","permalink":"https://someoneornobody.github.io/dev/hugo/hugo-start/","tags":["go","hugo","static site generators","ssg"],"title":"[HUGO] 시작하기"},{"categories":null,"contents":"No Results Found..\n","permalink":"https://someoneornobody.github.io/search/","tags":null,"title":"Search Results"}]